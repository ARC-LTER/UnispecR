gather("problem", "status", mislabeled, maxed, dim, absurd_reflectance, missing_spu) %>% # row for each type of problem
filter(!is.na(status)) %>% # remove non-problems
filter(status != FALSE) %>% # remove non-problems
group_by(spu_filename) %>%
select(spu_filename, problem, status) %>%
summarize(problems = str_c(unique(problem), collapse = ", ")) %>% # group: one row per spu_filename
rename(ref_filenames = spu_filename, ref_problem = problems) # rename variables to join w/unispec_problem_key
## Build Plot all reference data files
ref_data_all <- ref_data %>% unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(CorrectionFactor = 1/Reflectance)
ref_plot_all <- ggplot(ref_data_all, aes(x = Wavelength, y = CorrectionFactor, group=spu_filename)) +
geom_line(aes(color=Integration_ms)) + theme(legend.position="left")
## Build Plot all reference mistakes
ref_data_mistakes <- ref_data_all %>%
filter(CorrectionFactor > 5) %>%
distinct(spu_filename) %>%
select(spu_filename) %>%
left_join(ref_data_all)
ref_plot_mistakes <- ggplot(ref_data_mistakes, aes(x = Wavelength, y = CorrectionFactor)) +
geom_line(aes(color=spu_filename))
## PLOTS
ref_plot_all + ggtitle("ALL REFERENCES")
ref_plot_mistakes + ggtitle("REF Mistakes") +
scale_y_continuous(limits = c(0, NA))
## File Lists
ref_files <- ref_data$spu_filename %>% unique()
ref_mistakes <- ref_data_mistakes %>% distinct(spu_filename) %>% pull()
df_ref_filenames <- df_corrected %>% unnest(processed_spectra) %>%
select(spu_filename, ref_filenames) %>% distinct()
unispec_problem_key_pre <- unispec_file_key_fix%>%
mutate(Replicate = factor(Replicate)) %>%
# mislabeled
mutate(mislabeled = !is.na(key_fix)) %>% # mislabeled
# mismeasurement
left_join(maxed_data) %>% # maxed_number, maxed_wavelenghs
mutate(maxed = maxed_number > 5) %>% # choose how strict to make this using maxed_number threshold, etc. # mutate(maxed = spu_filename %in% maxed_data_files_bad) %>%
mutate(dim = spu_filename %in% dim_files) %>% # dim
mutate(absurd_reflectance = spu_filename %in% c(zero_files, absurd_files)) %>% # absurd_reflectance
# missing
mutate(missing_spu = spu_filename %in% missing_spu_files) %>%  # missing_spu
left_join(df_ref_filenames)
# miscorrection
ref_problem_key <- unispec_problem_key_pre %>%
filter(spu_filename %in% ref_files) %>% # select ref files
#mutate(mislabeled = if_else(spu_filename %in% ref_mistakes, TRUE, mislabeled)) %>%
gather("problem", "status", mislabeled, maxed, dim, absurd_reflectance, missing_spu) %>% # row for each type of problem
filter(!is.na(status)) %>% # remove non-problems
filter(status != FALSE) %>% # remove non-problems
group_by(spu_filename) %>%
select(spu_filename, problem, status) %>%
summarize(problems = str_c(unique(problem), collapse = ", ")) %>% # group: one row per spu_filename
rename(ref_filenames = spu_filename, ref_problem = problems) # rename variables to join w/unispec_problem_key
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(ref_problem, collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
mutate(file_problem = any(maxed, dim, absurd_reflectance)) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
### Summary table
unispec_problem_key %>%
mutate_at(funs(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems"))) %>%
summary()
### Summary table
unispec_problem_key %>%
mutate_at(list(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems"))) %>%
summary()
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(ref_problem, collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
mutate(file_problem = any(maxed, dim, absurd_reflectance)) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
unispec_problem_key
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(ref_problem, collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
mutate(file_problem = any(maxed, dim, absurd_reflectance, na.rm = T)) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
### Summary table
unispec_problem_key %>%
mutate_at(list(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems"))) %>%
summary()
unispec_file_key_fix
unispec_problem_key
unispec_problem_key_pre
unispec_problem_key
### Summary table
unispec_problem_key %>%
mutate_at(list(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems"))) %>%
summary()
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(ref_problem, collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
mutate(file_problem = any(maxed, dim, absurd_reflectance, na.rm = T)) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
unispec_problem_key
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(ref_problem, collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
mutate(file_problem = any(maxed, dim, absurd_reflectance, na.rm = T)) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
unispec_problem_key
?any
?which
ref_problem_key
unispec_problem_key %>% filter(!is.na(ref_problems))
s
unispec_problem_key
unispec_problem_key %>% distinct(ref_problems)
unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key)
unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% distinct(ref_problem)
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(str_replace_na(ref_problem), collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
mutate(file_problem = any(maxed, dim, absurd_reflectance, na.rm = T)) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
### Summary table
unispec_problem_key %>%
mutate_at(list(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems"))) %>%
summary()
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(str_replace_na(ref_problem), collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
mutate(file_problem = any(maxed, dim, absurd_reflectance, na.rm = T)) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
### Summary table
unispec_problem_key %>%
mutate_at(list(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems"))) %>%
summary()
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(str_replace_na(ref_problem), collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
mutate_at(.vars = c("dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = as.logical.factor()) %>%
mutate(file_problem = any(maxed, dim, absurd_reflectance, na.rm = T)) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(str_replace_na(ref_problem), collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
mutate_at(.vars = c("dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = as.logical) %>%
mutate(file_problem = any(maxed, dim, absurd_reflectance, na.rm = T)) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
### Summary table
unispec_problem_key %>%
mutate_at(list(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems"))) %>%
summary()
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(str_replace_na(ref_problem), collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
mutate(file_problem = any(maxed, dim, absurd_reflectance, na.rm = T)) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
unispec_problem_key_pre <- unispec_file_key_fix%>%
mutate(Replicate = factor(Replicate)) %>%
# mislabeled
mutate(mislabeled = !is.na(key_fix)) %>% # mislabeled
# mismeasurement
left_join(maxed_data) %>% # maxed_number, maxed_wavelenghs
mutate(maxed = maxed_number > 5) %>% # choose how strict to make this using maxed_number threshold, etc. # mutate(maxed = spu_filename %in% maxed_data_files_bad) %>%
mutate(dim = spu_filename %in% dim_files) %>% # dim
mutate(absurd_reflectance = spu_filename %in% c(zero_files, absurd_files)) %>% # absurd_reflectance
# missing
mutate(missing_spu = spu_filename %in% missing_spu_files) %>%  # missing_spu
left_join(df_ref_filenames)
# miscorrection
ref_problem_key <- unispec_problem_key_pre %>%
filter(spu_filename %in% ref_files) %>% # select ref files
#mutate(mislabeled = if_else(spu_filename %in% ref_mistakes, TRUE, mislabeled)) %>%
gather("problem", "status", mislabeled, maxed, dim, absurd_reflectance, missing_spu) %>% # row for each type of problem
filter(!is.na(status)) %>% # remove non-problems
filter(status != FALSE) %>% # remove non-problems
group_by(spu_filename) %>%
select(spu_filename, problem, status) %>%
summarize(problems = str_c(unique(problem), collapse = ", ")) %>% # group: one row per spu_filename
rename(ref_filenames = spu_filename, ref_problem = problems) # rename variables to join w/unispec_problem_key
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(str_replace_na(ref_problem), collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
mutate(file_problem = any(maxed, dim, absurd_reflectance, na.rm = T)) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
### Summary table
unispec_problem_key %>%
mutate_at(list(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems"))) %>%
summary()
maxed_data
unispec_problem_key_pre <- unispec_file_key_fix%>%
mutate(Replicate = factor(Replicate)) %>%
# mislabeled
mutate(mislabeled = !is.na(key_fix)) %>% # mislabeled
# mismeasurement
left_join(maxed_data) %>% # maxed_number, maxed_wavelenghs
mutate(maxed = maxed_number > 5) %>% # choose how strict to make this using maxed_number threshold, etc. # mutate(maxed = spu_filename %in% maxed_data_files_bad) %>%
mutate(dim = spu_filename %in% dim_files) %>% # dim
mutate(absurd_reflectance = spu_filename %in% c(zero_files, absurd_files)) %>% # absurd_reflectance
# missing
mutate(missing_spu = spu_filename %in% missing_spu_files) %>%  # missing_spu
left_join(df_ref_filenames)
unispec_problem_key_pre
unispec_problem_key_pre <- unispec_file_key_fix%>%
mutate(Replicate = factor(Replicate)) %>%
# mislabeled
mutate(mislabeled = !is.na(key_fix)) %>% # mislabeled
# mismeasurement
left_join(maxed_data) %>% # maxed_number, maxed_wavelenghs
mutate(maxed = spu_filename %in% maxed_data_files_bad) %>%
mutate(dim = spu_filename %in% dim_files) %>% # dim
mutate(absurd_reflectance = spu_filename %in% c(zero_files, absurd_files)) %>% # absurd_reflectance
# missing
mutate(missing_spu = spu_filename %in% missing_spu_files) %>%  # missing_spu
left_join(df_ref_filenames)
unispec_problem_key_pre <- unispec_file_key_fix%>%
mutate(Replicate = factor(Replicate)) %>%
# mislabeled
mutate(mislabeled = !is.na(key_fix)) %>% # mislabeled
# mismeasurement
left_join(maxed_data) %>% # maxed_number, maxed_wavelenghs
mutate(maxed = spu_filename %in% maxed_files) %>%
mutate(dim = spu_filename %in% dim_files) %>% # dim
mutate(absurd_reflectance = spu_filename %in% c(zero_files, absurd_files)) %>% # absurd_reflectance
# missing
mutate(missing_spu = spu_filename %in% missing_spu_files) %>%  # missing_spu
left_join(df_ref_filenames)
# miscorrection
ref_problem_key <- unispec_problem_key_pre %>%
filter(spu_filename %in% ref_files) %>% # select ref files
#mutate(mislabeled = if_else(spu_filename %in% ref_mistakes, TRUE, mislabeled)) %>%
gather("problem", "status", mislabeled, maxed, dim, absurd_reflectance, missing_spu) %>% # row for each type of problem
filter(!is.na(status)) %>% # remove non-problems
filter(status != FALSE) %>% # remove non-problems
group_by(spu_filename) %>%
select(spu_filename, problem, status) %>%
summarize(problems = str_c(unique(problem), collapse = ", ")) %>% # group: one row per spu_filename
rename(ref_filenames = spu_filename, ref_problem = problems) # rename variables to join w/unispec_problem_key
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(str_replace_na(ref_problem), collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
mutate(file_problem = any(maxed, dim, absurd_reflectance, na.rm = T)) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
### Summary table
unispec_problem_key %>%
mutate_at(list(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems"))) %>%
summary()
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(str_replace_na(ref_problem), collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu"), .funs = factor) %>%
select(spu_filename, Type, Date, Site, Block, Treatment, Replicate, Weather, Notes, missing_spu, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames) # order
### Summary table
unispec_problem_key %>%
mutate_at(list(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems"))) %>%
summary()
unispec_problem_key %>%   mutate(file_problem = any(maxed, dim, absurd_reflectance, na.rm = T))
?any
unispec_problem_key %>%  filter(any(maxed, dim))
unispec_problem_key %>%  filter(any(maxed, dim, na.rm = T))
unispec_problem_key %>%  filter(!is.na(maxed)
)
unispec_problem_key %>%  filter(is.na(maxed)
)
unispec_problem_key(maxed)
unispec_problem_key %>% filter(maxed)
unispec_problem_key %>% filter(any(maxed, dim))
unispec_problem_key %>% filter(any(maxed, dim, na.rm = F))
unispec_problem_key %>% filter(dim)
unispec_problem_key %>% filter(as.logical(dim)
)
unispec_problem_key %>% filter(as.logical(dim), maxed))
unispec_problem_key %>% filter(any(as.logical(dim), maxed))
unispec_problem_key %>% filter(as.logical(dim))
unispec_problem_key %>% filter(as.logical(dim), maxed, na.rm=T)
unispec_problem_key %>% filter(any(as.logical(dim), maxed, na.rm=T))
### Summary table
unispec_problem_key %>%
mutate_at(list(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems")))
maxed_files
dim_files
absurd_files
problem_files <- c(maxed_files, dim_files, absurd_files, missing_files)
missing_spu_files <- missing_spu_data$spu_filename
missing_spu_files
problem_files <- c(maxed_files, dim_files, absurd_files, missing_spu_files)
### Summary table
unispec_problem_key %>%
mutate_at(list(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems"))) %>%
mutate(file_problem = spu_filename %in% problem_files) %>%
summary()
ref_data %>%
## The following steps expand the "Block" column to create one REF set per Block per Site. This structure is necessary for situtations where different refs are used for different blocks at the same site.
separate(Block, into = c("BX1", "BX2", "BX3", "BX4"), sep = ",") %>% #1: expand string entry in "Block" into separate columns -- NOTE: this step throws a "Warning: Expected 4 pieces." for sites w/less than 4 blocks
gather(Block, BlockString, BX1:BX4) %>% #2: re-condense into one column, generates correct number of rows per site AND per block
mutate(Block = str_squish(BlockString), BlockString=NULL) %>% #3: replace placeholder column names w/"B1-B4". Also removes whitespace from BlockString contents introduced by "separate" function
filter(!is.na(Block))
knitr::opts_chunk$set(echo = TRUE)
## Required Packages
library("tidyverse")
library("knitr")
source("UnispecProtocol/unispec_protocol_functions.R") # file loads required functions
data_path <-  "/Users/toolik/OneDrive - Marine Biological Laboratory/Toolik Terrestrial/UnispecData/2019/"
dir_year <- "2019"
Site_Names <- list(HTH = "DHT", DH ="DHT", LDHT = "DHT", DHTB = "DHT", DHTPC = "DHT", HST = "HIST", HIS="HIST",
LOF = "LMAT",  LOFB = "LMAT", LNB = "LMAT", LOFRB ="LMAT",
MATB="MAT", MATSL= "MAT", MATBK = "MAT",
MANTB ="MNAT",MNATB ="MNAT", NAMTB = "MNAT",
NMNT = "NANT", NANTB ="NANT", JULNB ="NANT",NMNTB ="NANT",
LSHB= "SHB", SHBB = "SHB", SHRBB = "SHB", SHRB = "SHB",
LWSG = "WSG", WSGB = "WSG", WS ="WSG", WSB = "WSG", WSDB = "WSG", TEST = "LAB2")
band_defns <- tribble(
~definition, ~color, ~min, ~max,
"ITEX", "red", 560, 600,
"ITEX", "nir", 725, 1000,
"MODIS", "red", 620, 670,
"MODIS", "nir", 841, 876,
"MODIS", "blue", 459,479,
"SKYE", "red", 620, 680,
"SKYE", "nir", 830, 880,
"SKYE", "blue", 455, 480,
"ToolikGIS_Drone_2018", "red", 640, 680,
"ToolikGIS_Drone_2018", "nir", 820, 890,
"ToolikGIS_MicaSense_2019", "blue", 455, 495,
"ToolikGIS_MicaSense_2019", "green", 540, 580,
"ToolikGIS_MicaSense_2019", "red", 658, 678,
"ToolikGIS_MicaSense_2019", "red_edge", 707, 727,
"ToolikGIS_MicaSense_2019", "near_ir", 800, 880,
"ToolikEDC", "red", 560, 680,
"ToolikEDC", "nir", 725, 1000
)
knitr::opts_chunk$set(echo = TRUE)
## Required Packages
library("tidyverse")
library("knitr")
source("UnispecProtocol/unispec_protocol_functions.R") # file loads required functions
data_path <-  "/Users/toolik/OneDrive - Marine Biological Laboratory/Toolik Terrestrial/UnispecData/2019/"
dir_year <- "2019"
Site_Names <- list(HTH = "DHT", DH ="DHT", LDHT = "DHT", DHTB = "DHT", DHTPC = "DHT", HST = "HIST", HIS="HIST",
LOF = "LMAT",  LOFB = "LMAT", LNB = "LMAT", LOFRB ="LMAT",
MATB="MAT", MATSL= "MAT", MATBK = "MAT",
MANTB ="MNAT",MNATB ="MNAT", NAMTB = "MNAT",
NMNT = "NANT", NANTB ="NANT", JULNB ="NANT",NMNTB ="NANT",
LSHB= "SHB", SHBB = "SHB", SHRBB = "SHB", SHRB = "SHB",
LWSG = "WSG", WSGB = "WSG", WS ="WSG", WSB = "WSG", WSDB = "WSG", TEST = "LAB2")
band_defns <- tribble(
~definition, ~color, ~min, ~max,
"ITEX", "red", 560, 600,
"ITEX", "nir", 725, 1000,
"MODIS", "red", 620, 670,
"MODIS", "nir", 841, 876,
"MODIS", "blue", 459,479,
"SKYE", "red", 620, 680,
"SKYE", "nir", 830, 880,
"SKYE", "blue", 455, 480,
"ToolikGIS_Drone_2018", "red", 640, 680,
"ToolikGIS_Drone_2018", "nir", 820, 890,
"ToolikGIS_MicaSense_2019", "blue", 455, 495,
"ToolikGIS_MicaSense_2019", "green", 540, 580,
"ToolikGIS_MicaSense_2019", "red", 658, 678,
"ToolikGIS_MicaSense_2019", "red_edge", 707, 727,
"ToolikGIS_MicaSense_2019", "near_ir", 800, 880,
"ToolikEDC", "red", 560, 680,
"ToolikEDC", "nir", 725, 1000
)
raw_filename <- paste0(data_path, dir_year, "_raw_spu_data.rds")
spu_spectra <- read_rds(raw_filename)
raw_keyname <- paste0(data_path, dir_year, "_raw_spu_key.csv")
spu_key <- read_csv(raw_keyname)
spu_dataframe_from_file <- full_join(spu_spectra, spu_key) %>%
#mutate(DateTime = ymd_hms(DateTime, tz = "US/Alaska")) %>%
mutate(Date = str_extract(spu_filename, pattern = "^[0-9]{4}-[0-9]{2}-[0-9]{2}")) %>%  # from filename, not DateTime (sometimes discrepancy in unispec instrument time)
arrange(DateTime)
spu_dataframe <- spu_dataframe_from_file
file_key_fix <- paste0(data_path, "2019_unispec_file_key_fix.csv")
unispec_file_key_fix <- read_csv(file_key_fix, col_types = cols(
spu_filename = col_character(),
Date = col_date(format = "%m/%d/%Y"),
Site = col_character(),
Block = col_character(),
Treatment = col_character(),
Replicate = col_double(),
FileNum = col_double(),
Weather = col_character(),
Notes = col_character(),
key_fix = col_logical()
)) %>% filter(!is.na(Site)) %>% mutate(Date = as.character(Date))
# Check for different spelling of site names
unique(spu_dataframe$Site)
spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
df <- full_join(spu_dataframe, unispec_file_key_fix %>% select(-spu_filename, -Type)) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
## Summary Table
df %>%
group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable()
read_spu_file_metadata <- function(filename) {
ruby_year <- str_detect(filename, "UnispecData/2017|UnispecData/2018|UnispecData/2019")
if (ruby_year) {
## Reads a .spu file from 2017 or 2018
# Filename metadata
filename_metadata <- unlist(str_split(filename, pattern = "/")) %>% last() %>% str_split("_") %>% unlist()
Site <- filename_metadata[2]
Date <- filename_metadata[1]
FileNum <- as.integer(str_extract(filename_metadata[3], "\\d{5}")) # extract 5 digits
# Extract info from the file itself, reading metadata from first 9 lines. Create a dataframe
text <- read_lines(filename, n_max=9)
DateTime <-  lubridate::mdy_hms(text[3], tz="America/Anchorage")
Date <- lubridate::date(DateTime)
Integration_ms <- as.numeric(strsplit(text[8], split = " ")[[1]][3])
Temp <- as.numeric(strsplit(strsplit(text[5], split = " ")[[1]][4], split="=")[[1]][2])
Remarks <- text[2]
# Truncated Filename
Spufilename <- unlist(str_split(filename, pattern = "/")) %>% last()
# Metadata
metaData <- tibble(Site=Site, FileNum=FileNum, Date=Date, DateTime=DateTime, Integration_ms=Integration_ms,
Temp=Temp, Remarks=Remarks, spu_filename=Spufilename )
} else {
## Reads a generic .spu file. Written for Historic (pre-2017) years.
# Extract metadata from filenames that have format "DATE/SITE_FILENUM.spu", e.g. "2018-06-22/DHT_00000.spu"
Site <- toupper(str_replace(filename,".*[/](.*)[_]+.*$","\\1")) # get string after / & before _
# Extract metadata from filenames that have format "DATESITEFILENUM.spu", e.g. "JUN8LOF100036.spu"
if (str_length(Site) > 5) {
Site <- toupper(str_replace(filename,"(^.*?\\d{1,2})\\s*([a-zA-Z]*)(\\d{5,7}\\.spu$)","\\2"))
# For 2012 and 2013 the spu filenames have ddmmmsite format; need to remove the 3 letter month.
if (str_length(Site)> 5){
pattern <- c("MAY","JUN","JUL", "AUG")
for (i in 1:4){Site<- sub(pattern[i], "", Site)}
}
}
# Avoid issues of digits in site/block name reading in as part of FileNum
## Based on the Unispec DC using 5 digits for automatic file numbering
FileNum <- as.integer(str_replace(filename,"(^.*?\\d{1,2})(\\D*)(\\d{5})(\\.spu$)","\\3"))
# Extract info from the file itself, reading metadata from first 9 lines. Create a dataframe
text <- read_lines(filename, n_max=9)
DateTime <-  lubridate::mdy_hms(text[3], tz="America/Anchorage")
Date <- lubridate::date(DateTime)
Integration_ms <- as.numeric(strsplit(text[8], split = " ")[[1]][3])
Temp <- as.numeric(strsplit(strsplit(text[5], split = " ")[[1]][4], split="=")[[1]][2])
Remarks <- text[2]
#Extract the file name in the spu file as a check. Some file names have spaces
Spufilename <- tolower(str_replace(text[1],".*[\\\\]([A-z0-9.]\\s*)","\\1"))
Spufilename <- str_replace(Spufilename,"\"","") # remove trailing quote
#Extract
Spufilename_file <- tolower(str_replace(filename,".*[\\\\/]([A-z0-9.]\\s*)","\\1"))
metaData <- tibble(Site=Site, FileNum=FileNum, Date=Date, DateTime=DateTime, Integration_ms=Integration_ms,
Temp=Temp, Remarks=Remarks, spu_filename=Spufilename )
}
print(Spufilename) # use for error checking
return(metaData)
}
