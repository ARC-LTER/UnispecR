ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type), stat = "identity") +
facet_wrap(vars(Site))
species
other
identity <- c("litter", "lichen", "moss", "frost boil", "bare", "vole litter")
other <- species[!species %in% c(decid_shrubs, evgreen_shrubs, graminoids, forbs, st_dead_shrubs, "litter", "lichen", "frost boil", "bare")]
other
cover_means <- cover_data %>% group_by(Site, Block, Treatment, Plot, Species) %>%
summarize(cover = mean(cover, na.rm = T)) %>% filter(!is.na(cover)) %>%
group_by(Site, Treatment, Species) %>%
group_by(N = n(), add = TRUE) %>% # add number of blocks per site to get Standard Error
summarize_at(vars(cover), funs(mean, sd), na.rm = T) %>%
mutate(Type = ifelse(Species %in% decid_shrubs, "Deciduous Shrubs",
ifelse(Species %in% evgreen_shrubs, "Evergreen Shrubs",
ifelse(Species %in% st_dead_shrubs, "St. Dead Shrubs",
ifelse(Species %in% forbs, "Forbs",
ifelse(Species %in% graminoids, "Graminoids",
ifelse(Species %in% identity, Species, "other")))))))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type), stat = "identity") +
facet_wrap(vars(Site))
cover_means <- cover_data %>% group_by(Site, Block, Treatment, Plot, Species) %>%
summarize(cover = mean(cover, na.rm = T)) %>% filter(!is.na(cover)) %>%
group_by(Site, Treatment, Species) %>%
group_by(N = n(), add = TRUE) %>% # add number of blocks per site to get Standard Error
summarize_at(vars(cover), funs(mean, sd), na.rm = T) %>%
mutate(Type = ifelse(Species %in% decid_shrubs, "Deciduous Shrubs",
ifelse(Species %in% evgreen_shrubs, "Evergreen Shrubs",
ifelse(Species %in% st_dead_shrubs, "St. Dead Shrubs",
ifelse(Species %in% forbs, "Forbs",
ifelse(Species %in% graminoids, "Graminoids",
ifelse(Species %in% identity, Species, "other"))))))) %>%
mutate(Type = factor(Type, levels = c("Forbs", "Evergreen Shrubs", "Deciduous Shrubs", "Graminoids", "St. Dead Shrubs",
"litter", "lichen", "moss", "bare")))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type), stat = "identity") +
facet_wrap(vars(Site))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type), stat = "identity") +
scale_fill_manual(values = c("brown", "grey", "blue", "magenta", "dark blue", "orange", "dark green", "red"))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type), stat = "identity") +
scale_fill_manual(values = c("brown", "grey", "blue", "magenta", "dark blue", "orange", "dark green", "red", "white")) +
facet_wrap(vars(Site))
cover_means <- cover_data %>% group_by(Site, Block, Treatment, Plot, Species) %>%
summarize(cover = mean(cover, na.rm = T)) %>% filter(!is.na(cover)) %>%
group_by(Site, Treatment, Species) %>%
group_by(N = n(), add = TRUE) %>% # add number of blocks per site to get Standard Error
summarize_at(vars(cover), funs(mean, sd), na.rm = T) %>%
mutate(Type = ifelse(Species %in% decid_shrubs, "Deciduous Shrubs",
ifelse(Species %in% evgreen_shrubs, "Evergreen Shrubs",
ifelse(Species %in% st_dead_shrubs, "St. Dead Shrubs",
ifelse(Species %in% forbs, "Forbs",
ifelse(Species %in% graminoids, "Graminoids",
ifelse(Species %in% identity, Species, "other"))))))) %>%
mutate(Type = factor(Type, levels = c("Forbs", "Evergreen Shrubs", "Deciduous Shrubs", "Graminoids", "St. Dead Shrubs",
"litter", "lichen", "moss", "bare"))) %>%
mutate(Treatment = factor(Treatment, levels = c("CT", "N", "P", "NP")))
cover_means <- cover_data %>%
mutate(Treatment = factor(Treatment, levels = c("CT", "N", "P", "NP"))) %>%
group_by(Site, Block, Treatment, Plot, Species) %>%
summarize(cover = mean(cover, na.rm = T)) %>% filter(!is.na(cover)) %>%
group_by(Site, Treatment, Species) %>%
group_by(N = n(), add = TRUE) %>% # add number of blocks per site to get Standard Error
summarize_at(vars(cover), funs(mean, sd), na.rm = T) %>%
mutate(Type = ifelse(Species %in% decid_shrubs, "Deciduous Shrubs",
ifelse(Species %in% evgreen_shrubs, "Evergreen Shrubs",
ifelse(Species %in% st_dead_shrubs, "St. Dead Shrubs",
ifelse(Species %in% forbs, "Forbs",
ifelse(Species %in% graminoids, "Graminoids",
ifelse(Species %in% identity, Species, "other"))))))) %>%
mutate(Type = factor(Type, levels = c("Forbs", "Evergreen Shrubs", "Deciduous Shrubs", "Graminoids", "St. Dead Shrubs",
"litter", "lichen", "moss", "bare")))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type), stat = "identity") +
scale_fill_manual(values = c("brown", "grey", "blue", "magenta", "dark blue", "orange", "dark green", "red", "white")) +
facet_wrap(vars(Site))
other <- species[!species %in% c(decid_shrubs, evgreen_shrubs, graminoids, forbs, st_dead_shrubs,
identity))
other <- species[!species %in% c(decid_shrubs, evgreen_shrubs, graminoids, forbs, st_dead_shrubs,
identity)]
other
forbs <- c("Arc alp", "Ped lab", "Pol bis", "Rub cha", "Sax ang", "Sax dav", "Sax pun",
"Ped cap", "Ped kan", "Ped oed", "Ped sp.", "Ped sud", "Pyr Sec")
identity <- c("litter", "lichen", "moss", "frost boil", "bare", "vole litter")
other <- species[!species %in% c(decid_shrubs, evgreen_shrubs, graminoids, forbs, st_dead_shrubs,
identity)]
other
## Calculate Means & Tag Functional Groups
cover_means <- cover_data %>%
mutate(Treatment = factor(Treatment, levels = c("CT", "N", "P", "NP"))) %>%
group_by(Site, Block, Treatment, Plot, Species) %>%
summarize(cover = mean(cover, na.rm = T)) %>% filter(!is.na(cover)) %>%
group_by(Site, Treatment, Species) %>%
group_by(N = n(), add = TRUE) %>% # add number of blocks per site to get Standard Error
summarize_at(vars(cover), funs(mean, sd), na.rm = T) %>%
mutate(Type = ifelse(Species %in% decid_shrubs, "Deciduous Shrubs",
ifelse(Species %in% evgreen_shrubs, "Evergreen Shrubs",
ifelse(Species %in% st_dead_shrubs, "St. Dead Shrubs",
ifelse(Species %in% forbs, "Forbs",
ifelse(Species %in% graminoids, "Graminoids",
ifelse(Species %in% identity, Species, "other"))))))) %>%
mutate(Type = factor(Type, levels = c("Forbs", "Evergreen Shrubs", "Deciduous Shrubs", "Graminoids", "St. Dead Shrubs",
"litter", "lichen", "moss", "bare")))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type), stat = "identity") +
scale_fill_manual(values = c("brown", "grey", "blue", "magenta", "dark blue", "orange", "dark green", "red", "white")) +
facet_wrap(vars(Site))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type), stat = "identity") +
scale_fill_manual(values = c("brown", "grey", "blue", "magenta", "dark blue", "orange", "dark green", "red", "black")) +
facet_wrap(vars(Site))
other
forbs <- c("Arc alp", "Ped lab", "Pol bis", "Rub cha", "Sax ang", "Sax dav", "Sax pun",
"Ped cap", "Ped kan", "Ped oed", "Ped sp.", "Ped sud", "Pyr Sec", "Dry int")
identity <- c("litter", "lichen", "moss", "frost boil", "bare", "vole litter")
other <- species[!species %in% c(decid_shrubs, evgreen_shrubs, graminoids, forbs, st_dead_shrubs,
identity)]
other
## Calculate Means & Tag Functional Groups
cover_means <- cover_data %>%
mutate(Treatment = factor(Treatment, levels = c("CT", "N", "P", "NP"))) %>%
group_by(Site, Block, Treatment, Plot, Species) %>%
summarize(cover = mean(cover, na.rm = T)) %>% filter(!is.na(cover)) %>%
group_by(Site, Treatment, Species) %>%
group_by(N = n(), add = TRUE) %>% # add number of blocks per site to get Standard Error
summarize_at(vars(cover), funs(mean, sd), na.rm = T) %>%
mutate(Type = ifelse(Species %in% decid_shrubs, "Deciduous Shrubs",
ifelse(Species %in% evgreen_shrubs, "Evergreen Shrubs",
ifelse(Species %in% st_dead_shrubs, "St. Dead Shrubs",
ifelse(Species %in% forbs, "Forbs",
ifelse(Species %in% graminoids, "Graminoids",
ifelse(Species %in% identity, Species, "other"))))))) %>%
mutate(Type = factor(Type, levels = c("Forbs", "Evergreen Shrubs", "Deciduous Shrubs", "Graminoids", "St. Dead Shrubs",
"litter", "lichen", "moss", "bare")))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type), stat = "identity") +
scale_fill_manual(values = c("brown", "grey", "blue", "magenta", "dark blue", "orange", "dark green", "red", "black")) +
facet_wrap(vars(Site))
other
forbs <- c("Arc alp", "Ped lab", "Pol bis", "Rub cha", "Sax ang", "Sax dav", "Sax pun",
"Ped cap", "Ped kan", "Ped oed", "Ped sp.", "Ped sud", "Pyr Sec", "Dry int",
"Epi ang")
identity <- c("litter", "lichen", "moss", "frost boil", "bare", "vole litter")
other <- species[!species %in% c(decid_shrubs, evgreen_shrubs, graminoids, forbs, st_dead_shrubs,
identity)]
other
## Calculate Means & Tag Functional Groups
cover_means <- cover_data %>%
mutate(Treatment = factor(Treatment, levels = c("CT", "N", "P", "NP"))) %>%
group_by(Site, Block, Treatment, Plot, Species) %>%
summarize(cover = mean(cover, na.rm = T)) %>% filter(!is.na(cover)) %>%
group_by(Site, Treatment, Species) %>%
group_by(N = n(), add = TRUE) %>% # add number of blocks per site to get Standard Error
summarize_at(vars(cover), funs(mean, sd), na.rm = T) %>%
mutate(Type = ifelse(Species %in% decid_shrubs, "Deciduous Shrubs",
ifelse(Species %in% evgreen_shrubs, "Evergreen Shrubs",
ifelse(Species %in% st_dead_shrubs, "St. Dead Shrubs",
ifelse(Species %in% forbs, "Forbs",
ifelse(Species %in% graminoids, "Graminoids",
ifelse(Species %in% identity, Species, "other"))))))) %>%
mutate(Type = factor(Type, levels = c("Forbs", "Evergreen Shrubs", "Deciduous Shrubs", "Graminoids", "St. Dead Shrubs",
"litter", "lichen", "moss", "bare")))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type), stat = "identity") +
scale_fill_manual(values = c("brown", "grey", "blue", "magenta", "dark blue", "orange", "dark green", "red", "black")) +
facet_wrap(vars(Site))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type, color = Species), stat = "identity") +
scale_fill_manual(values = c("brown", "grey", "blue", "magenta", "dark blue", "orange", "dark green", "red", "black")) +
facet_wrap(vars(Site))
other
graminoids <- c("Poa arc", "Eri vag", "Car big", "Car mic", "Cal lap", "Eri ang", "Arc lat")
forbs <- c("Arc alp", "Ped lab", "Pol bis", "Rub cha", "Sax ang", "Sax dav", "Sax pun",
"Ped cap", "Ped kan", "Ped oed", "Ped sp.", "Ped sud", "Pyr Sec", "Dry int",
"Epi ang", "Tofieldia", "Tof coc")
identity <- c("litter", "lichen", "moss", "frost boil", "bare", "vole litter")
other <- species[!species %in% c(decid_shrubs, evgreen_shrubs, graminoids, forbs, st_dead_shrubs,
identity)]
other
## Calculate Means & Tag Functional Groups
cover_means <- cover_data %>%
mutate(Treatment = factor(Treatment, levels = c("CT", "N", "P", "NP"))) %>%
group_by(Site, Block, Treatment, Plot, Species) %>%
summarize(cover = mean(cover, na.rm = T)) %>% filter(!is.na(cover)) %>%
group_by(Site, Treatment, Species) %>%
group_by(N = n(), add = TRUE) %>% # add number of blocks per site to get Standard Error
summarize_at(vars(cover), funs(mean, sd), na.rm = T) %>%
mutate(Type = ifelse(Species %in% decid_shrubs, "Deciduous Shrubs",
ifelse(Species %in% evgreen_shrubs, "Evergreen Shrubs",
ifelse(Species %in% st_dead_shrubs, "St. Dead Shrubs",
ifelse(Species %in% forbs, "Forbs",
ifelse(Species %in% graminoids, "Graminoids",
ifelse(Species %in% identity, Species, "other"))))))) %>%
mutate(Type = factor(Type, levels = c("Forbs", "Evergreen Shrubs", "Deciduous Shrubs", "Graminoids", "St. Dead Shrubs",
"litter", "lichen", "moss", "bare")))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type, color = Species), stat = "identity") +
scale_fill_manual(values = c("brown", "grey", "blue", "magenta", "dark blue", "orange", "dark green", "red", "black")) +
facet_wrap(vars(Site))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type), stat = "identity") +
scale_fill_manual(values = c("brown", "grey", "blue", "magenta", "dark blue", "orange", "dark green", "red", "black")) +
facet_wrap(vars(Site))
print(other)
graminoids <- c("Poa arc", "Eri vag", "Car big", "Car mic","Car rot", "Cal lap", "Eri ang", "Arc lat")
forbs <- c("Arc alp", "Ped lab", "Pol bis", "Pol viv", "Rub cha", "Sax ang", "Sax dav", "Sax pun",
"Ped cap", "Ped kan", "Ped oed", "Ped sp.", "Ped sud", "Pyr Sec", "Dry int",
"Epi ang", "Tofieldia", "Tof coc")
identity <- c("litter", "lichen", "moss", "frost boil", "bare", "vole litter")
other <- species[!species %in% c(decid_shrubs, evgreen_shrubs, graminoids, forbs, st_dead_shrubs,
identity)]
other
forbs <- c("Arc alp", "Ped lab", "Pol bis", "Pol viv", "Rub cha", "Sax ang", "Sax dav", "Sax pun",
"Ped cap", "Ped kan", "Ped oed", "Ped sp.", "Ped sud", "Pyr Sec", "Dry int",
"Epi ang", "Tofieldia", "Tof coc", "Draba sp.")
identity <- c("litter", "lichen", "moss", "frost boil", "bare", "vole litter")
other <- species[!species %in% c(decid_shrubs, evgreen_shrubs, graminoids, forbs, st_dead_shrubs,
identity)]
other
forbs <- c("Arc alp", "Ped lab", "Pol bis", "Pol viv", "Rub cha", "Sax ang", "Sax dav", "Sax pun",
"Ped cap", "Ped kan", "Ped oed", "Ped sp.", "Ped sud", "Pyr Sec", "Dry int",
"Epi ang", "Tofieldia", "Tof coc", "Draba sp.", "Equ arv")
identity <- c("litter", "lichen", "moss", "frost boil", "bare", "vole litter")
other <- species[!species %in% c(decid_shrubs, evgreen_shrubs, graminoids, forbs, st_dead_shrubs,
identity)]
other
forbs <- c("Arc alp", "Ped lab", "Pol bis", "Pol viv", "Rub cha", "Sax ang", "Sax dav", "Sax pun",
"Ped cap", "Ped kan", "Ped oed", "Ped sp.", "Ped sud", "Pyr Sec", "Dry int",
"Epi ang", "Tofieldia", "Tof coc", "Draba sp.", "Equ arv")
identity <- c("litter", "lichen", "moss", "frost boil", "bare", "vole litter")
other <- species[!species %in% c(decid_shrubs, evgreen_shrubs, graminoids, forbs, st_dead_shrubs,
identity)]
other
## Calculate Means & Tag Functional Groups
cover_means <- cover_data %>%
mutate(Treatment = factor(Treatment, levels = c("CT", "N", "P", "NP"))) %>%
group_by(Site, Block, Treatment, Plot, Species) %>%
summarize(cover = mean(cover, na.rm = T)) %>% filter(!is.na(cover)) %>%
group_by(Site, Treatment, Species) %>%
group_by(N = n(), add = TRUE) %>% # add number of blocks per site to get Standard Error
summarize_at(vars(cover), funs(mean, sd), na.rm = T) %>%
mutate(Type = ifelse(Species %in% decid_shrubs, "Deciduous Shrubs",
ifelse(Species %in% evgreen_shrubs, "Evergreen Shrubs",
ifelse(Species %in% st_dead_shrubs, "St. Dead Shrubs",
ifelse(Species %in% forbs, "Forbs",
ifelse(Species %in% graminoids, "Graminoids",
ifelse(Species %in% identity, Species, "other"))))))) %>%
mutate(Type = factor(Type, levels = c("Forbs", "Evergreen Shrubs", "Deciduous Shrubs", "Graminoids", "St. Dead Shrubs",
"litter", "lichen", "moss", "bare")))
ggplot(cover_means, aes(x=Treatment, y = mean)) +
geom_bar(aes(fill = Type), stat = "identity") +
scale_fill_manual(values = c("brown", "grey", "blue", "magenta", "dark blue", "orange", "dark green", "red", "black")) +
facet_wrap(vars(Site))
other
file_key_fix <- paste0(data_path, "2019_unispec_file_key.csv")
unispec_file_key_fix <- read_csv(file_key_fix, col_types = cols(
spu_filename = col_character(),
Date = col_character(), # for excel: col_date(format = "%m/%d/%Y"),
Site = col_character(),
Block = col_character(),
Treatment = col_character(),
Replicate = col_double(),
FileNum = col_double(),
Location = col_character(),
Weather = col_character(),
Notes = col_character(),
key_fix = col_logical()
)) %>% filter(!is.na(Site)) %>% mutate(Date = as.character(Date))
# Check for different spelling of site names
unique(spu_dataframe$Site)
spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
df <- full_join(spu_dataframe, unispec_file_key_fix %>% select(-spu_filename, -Type)) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
## Summary Table
df %>%
group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable()
# > Extract only Spectral data without metadata -----------------------------------------------------
spu_spectra <- spu_dataframe %>% select(spu_filename, DateTime, Spectra)
## Save raw data as .rds
raw_filename <- paste0(data_path, format(spu_dataframe$DateTime[1], format="%Y"),"_raw_spu_data.rds")
write_rds(spu_spectra, path = raw_filename)
# > Extract only Spectral Metadata for .csv key -----------------------------------------------------
spu_key <- spu_dataframe %>%
select(-Spectra) %>% # remove for .csv
select(spu_filename, everything()) # set order
## Save raw metadata key
raw_keyname <- paste0(data_path, format(spu_dataframe$DateTime[1], format="%Y"),"_raw_spu_key.csv")
write_csv(spu_key, path = raw_keyname)
## Read .spu raw files
raw_data_path <- paste0(data_path, "spu")
spu_files <- list.files(path = raw_data_path, pattern = ".spu$", full.names = T, recursive=T)
new_spu_files <- str_subset(spu_files, file_match, negate = T)
# Read all the metadata from the spu files using function read_spufile_metadata; add a variable with the filename
#  and max of ChA and ChB.
spu_metadata <- map_dfr(new_spu_files, read_spu_file_metadata) %>%
mutate(spu_filename_full = new_spu_files)
spu_data <- spu_metadata %>%
mutate(Spectra=map(spu_filename_full, function(x) read_spu_file_spectra(x)))
spu_dataframe_new <- spu_data %>% select(spu_filename, Site, FileNum, Date, DateTime, Integration_ms, Temp, Remarks, Spectra, everything())
# > Set Type of Scan -----------------------------------------------------
spu_dataframe_new <- spu_dataframe_new %>%
mutate(Type = ifelse(grepl("DARKscan",Remarks, fixed=T), "Darkscan",
ifelse(grepl("Datascan,DC",Remarks, fixed=T), "Throwawayscan", NA))) %>%
distinct(DateTime, spu_filename, .keep_all = T) %>%
mutate(Date = as.character(Date))
# > Join to previously collected data -----------------------------------------------------
spu_dataframe <-  spu_dataframe %>% bind_rows(spu_dataframe_new)
## Standardize Site Names
unique(spu_dataframe$Site)
spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
unique(spu_dataframe$Site)
## Data summary
spu_dataframe %>%   group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable()
# > Extract only Spectral data without metadata -----------------------------------------------------
spu_spectra <- spu_dataframe %>% select(spu_filename, DateTime, Spectra)
## Save raw data as .rds
raw_filename <- paste0(data_path, format(spu_dataframe$DateTime[1], format="%Y"),"_raw_spu_data.rds")
write_rds(spu_spectra, path = raw_filename)
# > Extract only Spectral Metadata for .csv key -----------------------------------------------------
spu_key <- spu_dataframe %>%
select(-Spectra) %>% # remove for .csv
select(spu_filename, everything()) # set order
## Save raw metadata key
raw_keyname <- paste0(data_path, format(spu_dataframe$DateTime[1], format="%Y"),"_raw_spu_key.csv")
write_csv(spu_key, path = raw_keyname)
field_key <- paste0(data_path, "2019_unispec_field_key.csv")
unispec_field_key <- read_csv(field_key, skip_empty_rows = T, col_types = cols(
Date = col_character(),
Site = col_character(),
Block = col_character(),
Treatment = col_character(),
Replicate = col_double(),
Location = col_character(),
FileNum = col_double(),
Weather = col_character(),
Notes = col_character()
)) ## remove NA rows
# Confirm spu_dataframe has same Site abbreviation as key
# > Standardize Site Names -----------------------------------------------------
# Check for different spelling of site names
unique(spu_dataframe$Site) %>% sort()
# spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
unique(unispec_field_key$Site) %>% sort()
df <- full_join(spu_dataframe, unispec_field_key) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
unispec_file_key <- df %>%
select(spu_filename, Date, Site, Block, Treatment, Replicate, Location, FileNum, Notes, Weather, Type) %>%
mutate(key_fix = NA)
fix_keyname <- paste0(data_path, dir_year,"_unispec_file_key.csv")
write_csv(unispec_file_key, path = fix_keyname)
file_key_fix <- paste0(data_path, "2019_unispec_file_key.csv")
unispec_file_key_fix <- read_csv(file_key_fix, col_types = cols(
spu_filename = col_character(),
Date = col_character(), # for excel: col_date(format = "%m/%d/%Y"),
Site = col_character(),
Block = col_character(),
Treatment = col_character(),
Replicate = col_double(),
FileNum = col_double(),
Location = col_character(),
Weather = col_character(),
Notes = col_character(),
key_fix = col_logical()
)) %>% filter(!is.na(Site)) %>% mutate(Date = as.character(Date))
# Check for different spelling of site names
unique(spu_dataframe$Site)
spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
df <- full_join(spu_dataframe, unispec_file_key_fix %>% select(-spu_filename, -Type)) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
## Summary Table
df %>%
group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable()
file_key_fix <- paste0(data_path, "2019_unispec_file_key.csv")
unispec_file_key_fix <- read_csv(file_key_fix, col_types = cols(
spu_filename = col_character(),
Date = col_character(), # for excel: col_date(format = "%m/%d/%Y"),
Site = col_character(),
Block = col_character(),
Treatment = col_character(),
Replicate = col_double(),
FileNum = col_double(),
Location = col_character(),
Weather = col_character(),
Notes = col_character(),
key_fix = col_logical()
)) %>% filter(!is.na(Site)) %>% mutate(Date = as.character(Date))
# Check for different spelling of site names
unique(spu_dataframe$Site)
spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
df <- full_join(spu_dataframe, unispec_file_key_fix %>% select(-spu_filename, -Type)) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
## Summary Table
df %>%
group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable()
## SPECIFY SITE/DATE/ETC to ZOOM IN ON
check_site <- "WSG1"
check_date <- "2019-07-31" # necessary to unlist dates vector
## Files
first_file <- 0
last_file <- 600
# Select columns to Check
timedata <- df %>%
filter(Date == check_date) %>%
filter(Site %in% check_site) %>%
filter(FileNum >= first_file) %>%
filter(FileNum <= last_file) %>%
select(Site, Date, DateTime, FileNum, Integration_ms, Type) %>%
group_by(DateTime) %>% distinct()
timedata$diff <- timedata$DateTime - lag(timedata$DateTime)
meta_timedata <- left_join(timedata, unispec_file_key)
time_check <- meta_timedata %>% select(Site, Date, DateTime, Block, Treatment, Replicate, FileNum, diff, Integration_ms, Type) %>% ungroup()
# Examine dataframe
time_check %>% print(n=300)
options(knitr.kable.NA = '')
## Build REF key
ref_keys <- unispec_file_key_fix %>%
filter(Treatment == "REF") %>% # extract reference data
## The following separates the Site column into "Site" and "Site_REF"
### Site = the site to which the reference measurements should be applied
### Site_REF = the site where the reference measurements were actually collected
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
mutate(Site_REF = coalesce(Site_REF, Site)) # if the references were collected at 'Site', the created column Site_REF will be NA. Use coalesce() to fill these NA's with the value of "Site".
### spu data for references
spu_for_ref <- spu_dataframe %>% # in "spu_dataframe", the "Site" column is the location where the data was collected
rename(Site_REF = Site) # we thus rename Site to Site_REF to match the column 'ref_keys'
## Join spu data to ref_keys by Site_REF, Date, FileNum
ref_data <- ref_keys %>% select(Date, Site, Site_REF, FileNum, Block, Treatment, Replicate, Weather, Notes, key_fix) %>%
left_join(spu_for_ref)  ## "Site_REF" is the location where the file (from which the reference correction factor is calculated) actually was collected
## "Site", inherited from ref_keys, is now the location where the correction factor should be applied
## Table of Reference Files
ref_table <- ref_data %>% group_by(Date, Site_REF) %>%
summarize(Sites = str_c(unique(Site), collapse = ","), Files = n_distinct(spu_filename)) %>%
kable()
## Table per Site of Reference Files
ref_filenames_table <- ref_data %>% group_by(Date, Site, Site_REF) %>%
summarize(Files = n_distinct(spu_filename), ref_filenames = str_c(spu_filename,collapse = ", "))
## Table per Site for all files
df_ref_table <- df %>%
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
filter(!is.na(Treatment)) %>%
group_by(Date, Site) %>%
summarize(Treatments = str_c(unique(Treatment), collapse = ","), Files = n_distinct(spu_filename))
#### Check that all Date / Sites have references
df_missing_refs <- df_ref_table %>%
filter(!str_detect(Treatments, "REF")) %>%
print(n=100)
## Output
ref_table
ref_filenames_table
df_missing_refs
ref_data %>% filter(Spectra %>% map(is.null) %>% map_lgl(any)) %>% select(Date, Site, Block) %>% unique()
## Build Plot all reference data files
ref_data_all <- ref_data %>% unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(CorrectionFactor = 1/Reflectance)
ref_plot_all <- ggplot(ref_data_all, aes(x = Wavelength, y = CorrectionFactor, group=spu_filename)) +
geom_line(aes(color=factor(Date > "2019-07-02"))) + theme(legend.position="left")
ref_plot_all
## Build Plot all reference mistakes
ref_data_mistakes <- ref_data_all %>%
filter(CorrectionFactor > 5) %>%
distinct(spu_filename) %>%
select(spu_filename) %>%
left_join(ref_data_all)
ref_plot_mistakes <- ggplot(ref_data_mistakes, aes(x = Wavelength, y = CorrectionFactor)) +
geom_line(aes(color=spu_filename))
ref_plot_mistakes
## PLOTS
ref_plot_all + ggtitle("ALL REFERENCES")
# ref_plot_mistakes + ggtitle("REF Mistakes") +
#   scale_y_continuous(limits = c(0, NA))
## File Lists
ref_files <- ref_data$spu_filename %>% unique()
ref_mistakes <- ref_data_mistakes %>% distinct(spu_filename) %>% pull()
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
## The following steps expand the "Block" column to create one REF set per Block per Site. This structure is necessary for situtations where different refs are used for different blocks at the same site.
separate(Block, into = c("BX1", "BX2", "BX3", "BX4"), sep = ",") %>% #1: expand string entry in "Block" into separate columns -- NOTE: this step throws a "Warning: Expected 4 pieces." for sites w/less than 4 blocks
gather(Block, BlockString, BX1:BX4) %>% #2: re-condense into one column, generates correct number of rows per site AND per block
mutate(Block = str_squish(BlockString), BlockString=NULL) %>% #3: replace placeholder column names w/"B1-B4". Also removes whitespace from BlockString contents introduced by "separate" function
filter(!is.na(Block)) %>% #4: remove empty rows for sites w/out B3 or B4
### Unnest Spectra & calculate
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(CorrectionFactor = 1/Reflectance) %>%
### The following code group repeated REF measurements, and takes the mean
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, Integration_ms) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor = mean(ChA/ChB), int_REF = mean(Integration_ms), Notes_REF = str_c(Notes, collapse = "; "), ref_filenames = str_c(spu_filename,collapse = ", "))
## Join DATA with REFS
### Check no missing Spectra
spu_dataframe %>% filter(Spectra %>% map(is.null) %>% map_lgl(any))
spu_for_plots <- df %>% filter(!str_detect(Treatment, "REF|DARK")) %>% filter(!is.na(DateTime)) %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
df_ref <- left_join(spu_for_plots, ref_summary) %>%
select(Date, DateTime, Site, Block, Treatment, Replicate, spu_filename, FileNum, Integration_ms, Weather, Notes, Notes_REF, ref_filenames, int_REF, Wavelength, ChB, ChA, ChB_REF, ChA_REF, CorrectionFactor) %>%
mutate(raw_reflectance = ChB/ChA) %>% # the raw reflectance
mutate(corrected_reflectance = raw_reflectance*CorrectionFactor)
## Corrected Reflectances
df_corrected <- df_ref %>%
nest(Wavelength:corrected_reflectance, .key = processed_spectra)
