## File List
absurd_files <- absurd_data$spu_filename
## Plot Check
absurd_data %>%
inner_join(spu_data) %>%
slice(1:10) %>%
plot_channels()
## Identify Site/Dates with missing REF's
print("Sites/Dates with missing References")
df  %>% group_by(Site, Date) %>%  summarize(Treatments = str_c(str_replace_na(unique(Treatment)), collapse = ","), Num_Files = n()) %>%
# filter(Treatments != "NA") %>%
filter(!str_detect(Treatments, "REF")) %>% #if non-empty, then REF files missing for some Date, Site
kable()
## Find all white reference data files (for MULTISPEC)
ref_data <- xlsx_key %>%
filter(str_detect(Treatment, "REF")) %>%  # extract reference data
inner_join(spu_data)
## Build Plot all reference data files
ref_data_all <- ref_data %>% unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(CorrectionFactor = 1/Reflectance)
ref_plot_all <- ggplot(ref_data_all, aes(x = Wavelength, y = CorrectionFactor)) +
geom_line(aes(color=spu_filename)) + theme(legend.position="none")
## Build Plot all reference mistakes
ref_data_mistakes <- ref_data_all %>%
filter(CorrectionFactor > 5) %>%
distinct(spu_filename) %>%
select(spu_filename) %>%
left_join(ref_data_all)
ref_plot_mistakes <- ggplot(ref_data_mistakes, aes(x = Wavelength, y = CorrectionFactor)) +
geom_line(aes(color=spu_filename))
## Summary
ref_data %>% group_by(Date, Site) %>%
summarize(Treatments = str_c(unique(Treatment), collapse=","), Files = n_distinct(spu_filename)) %>%
kable()
## PLOTS
#ref_plot_all + ggtitle("ALL REFERENCES")
ref_plot_mistakes + ggtitle("REF Mistakes") +
scale_y_continuous(limits = c(0, NA))
## File Lists
ref_files <- ref_data$spu_filename %>% unique()
ref_mistakes <- ref_data_mistakes %>% distinct(spu_filename) %>% pull()
unispec_problem_key_pre <- unispec_key_fix %>%
# mislabeled
mutate(mislabeled = !is.na(key_fix)) %>% # mislabeled
# mismeasurement
left_join(maxed_data) %>% # maxed_number, maxed_wavelenghs
mutate(maxed = maxed_number > 5) %>% # choose how strict to make this using maxed_number threshold, etc. # mutate(maxed = spu_filename %in% maxed_data_files_bad) %>%
mutate(dim = spu_filename %in% dim_files) %>% # dim
mutate(absurd_reflectance = spu_filename %in% c(zero_files, absurd_files)) %>% # absurd_reflectance
# missing
mutate(missing_spu = spu_filename %in% missing_spu_files) %>%  # missing_spu
mutate(missing_xlsx = spu_filename %in% unprocessed_spu_files) %>% # unprocessed_spu
left_join(multispec_data %>% select(-multispec_spectra)) %>%  # add ref_filenames
mutate(ref_filenames = tolower(ref_filenames)) # make sure all filenames are lower case
# miscorrection
ref_problem_key <- unispec_problem_key_pre %>%
filter(spu_filename %in% ref_files) %>% # select ref files
#mutate(mislabeled = if_else(spu_filename %in% ref_mistakes, TRUE, mislabeled)) %>%
gather("problem", "status", mislabeled, maxed, dim, absurd_reflectance, missing_spu) %>% # row for each type of problem
filter(!is.na(status)) %>% # remove non-problems
filter(status != FALSE) %>% # remove non-problems
group_by(spu_filename) %>%
select(spu_filename, problem, status) %>%
summarize(problems = str_c(unique(problem), collapse = ", ")) %>% # group: one row per spu_filename
rename(ref_filenames = spu_filename, ref_problem = problems) # rename variables to join w/unispec_problem_key
## Unispec Problem Key
unispec_problem_key <- unispec_problem_key_pre %>%
separate_rows(ref_filenames, sep = ", ") %>% # split ref_filenames string into multiple rows per ref_filename
left_join(ref_problem_key) %>% # adds ref_problem column
group_by(spu_filename) %>%
summarize(ref_problems = str_c(ref_problem, collapse = "; ")) %>% # collapse to one row per spu_filename
right_join(unispec_problem_key_pre) %>%  # add the rest of the key info back in
mutate_at(.vars = c("ref_problems", "dim", "absurd_reflectance", "mislabeled", "missing_spu", "missing_xlsx"), .funs = factor) %>%
#mutate(file_problem = any(maxed, dim, absurd_reflectance)) %>%
mutate(file_problem = spu_filename %in% c(maxed_files_bad, dim_files, absurd_files)) %>%
select(spu_filename, Type:Weather, missing_spu, missing_xlsx, file_problem, mislabeled, key_fix, maxed, maxed_number, maxed_wavelengths, dim, absurd_reflectance, ref_problems, ref_filenames, xlsx_filename) # order
unispec_problem_key %>%
mutate_at(funs(factor), .vars = vars(c("Site", "Block", "Treatment", "key_fix", "ref_problems"))) %>%
mutate(file_problem = spu_filename %in% c(maxed_files_bad, dim_files, absurd_files))  %>%
summary()
key_filename <- paste0(data_path, dir_year, "_unispec_key_problems.csv") # manually updated key
unispec_problem_key <- read_csv(key_filename, skip_empty_rows = T, col_types = cols(ref_problems = col_character())) %>%
mutate_at(.funs = factor, .vars = vars("Site", "Block", "Treatment", "Replicate", "key_fix", "ref_problems"))
unispec_problem_key %>% summary()
## Save .csv of file key
unispec_problem_keyname <- paste0(data_path, format(unispec_problem_key$Date[1], format="%Y"),"_unispec_key_problems.csv")
## update file_problem column
unispec_problem_key <- unispec_problem_key %>%   mutate(file_problem = spu_filename %in% c(maxed_files_bad, dim_files, absurd_files))
write_csv(unispec_problem_key, path = unispec_problem_keyname)
key_filename <- paste0(data_path, dir_year, "_unispec_key_problems.csv") # manually updated key
unispec_problem_key <- read_csv(key_filename, skip_empty_rows = T, col_types = cols(ref_problems = col_character())) %>%
mutate_at(.funs = factor, .vars = vars("Site", "Block", "Treatment", "Replicate", "key_fix", "ref_problems"))
unispec_problem_key %>% summary()
## Load new data for shiny
df_2014 <- read_rds("UnispecData/2014_processed_xlsx_data.rds")
## Load new data for shiny
df_2014 <- read_rds("UnispecRecord/UnispecData/2014_processed_xlsx_data.rds")
df_2014
unispec_problem_key_2014 <- read_csv("UnispecRecord/UnispecData/2014_unispec_key_problems.csv", skip_empty_rows = T, col_types = cols(ref_problems = col_character())) %>%
mutate_at(.funs = factor, .vars = vars("Site", "Block", "Treatment", "Replicate", "key_fix", "ref_problems")) %>%
left_join(read_csv("UnispecRecord/UnispecData/2015_raw_spu_key.csv") %>% select(spu_filename, DateTime))
unispec_data_2014 <- unispec_problem_key_2014 %>%
filter(!is.na(Treatment)) %>%
filter(!file_problem) %>% left_join(df_2014) %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any)) %>%
rename(Spectra = multispec_spectra)
indices_2014 <- unispec_data_2015 %>%
## Calculate NDVI
mutate(Indices = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = "MODIS", indices = c("NDVI", "EVI", "EVI2"))))
indices_2014 <- unispec_data_2014 %>%
## Calculate NDVI
mutate(Indices = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = "MODIS", indices = c("NDVI", "EVI", "EVI2"))))
indices_2014
indices_2014$Indices[1]
write_rds(path = "UnispecRecord/UnispecData/2014_index_data.rds", indices_2014)
indices_2014 <- indices_2014 %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Date = lubridate::date(Date)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>%
unnest(Indices) %>% spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
indices_2014
indices_2014 <- indices_2014 %>%
left_join(read_csv("UnispecRecord/UnispecData/2014_spu_key.csv") %>% select(spu_filename, DateTime)) %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Date = lubridate::date(Date)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>%
unnest(Indices) %>% spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
indices_2014 <- indices_2014 %>%
left_join(read_csv("UnispecRecord/UnispecData/2014_raw_spu_key.csv") %>% select(spu_filename, DateTime)) %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Date = lubridate::date(Date)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>%
unnest(Indices) %>% spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
indices_2014
bind_rows(indices_2014, indices_2015, indices_2016, indices_2017, indices_2018, indices_2019, shiny_data)
indices_2016 <- read_rds("UnispecRecord/UnispecData/2016_index_data.rds") %>%
left_join(unispec_problem_key_2016) %>%
filter(!file_problem)  %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Date = lubridate::date(Date)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>%
unnest(Indices) %>%
filter(spu_filename != "jul21lof00006.spu")%>% spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
unispec_problem_key_2016 <- read_csv("UnispecRecord/UnispecData/2016_unispec_key_problems.csv", skip_empty_rows = T, col_types = cols(ref_problems = col_character())) %>%
mutate_at(.funs = factor, .vars = vars("Site", "Block", "Treatment", "Replicate", "key_fix", "ref_problems")) %>%
left_join(read_csv("UnispecRecord/UnispecData/2016_raw_spu_key.csv") %>% select(spu_filename, DateTime))
indices_2016 <- read_rds("UnispecRecord/UnispecData/2016_index_data.rds") %>%
left_join(unispec_problem_key_2016) %>%
filter(!file_problem)  %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Date = lubridate::date(Date)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>%
unnest(Indices) %>%
filter(spu_filename != "jul21lof00006.spu")%>% spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
indices_2014 <- read_rds("UnispecRecord/UnispecData/2014_index_data.rds") %>%
left_join(read_csv("UnispecRecord/UnispecData/2014_raw_spu_key.csv") %>% select(spu_filename, DateTime)) %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Date = lubridate::date(Date)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>%
unnest(Indices) %>% spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
bind_rows(indices_2014, indices_2015, indices_2016, indices_2017, indices_2018, indices_2019, shiny_data)
indices_2017 <- read_rds("UnispecRecord/UnispecData/2017_index_data.rds") %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Date = lubridate::date(Date)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>%
unnest(Indices) %>% spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
indices_2018 <- read_rds("UnispecRecord/UnispecData/2018_unispec_dataframe_clean.rds") %>%   mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Date = lubridate::date(Date)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>% unnest(corrected_indices) %>%
spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
indices_2019 <- read_rds("UnispecRecord/UnispecData/2019/2019_index_data.rds") %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Date = lubridate::date(Date)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>%
unnest(Indices) %>% spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
bind_rows(indices_2014, indices_2015, indices_2016, indices_2017, indices_2018, indices_2019)
shiny_data <- bind_rows(indices_2014, indices_2015, indices_2016, indices_2017, indices_2018, indices_2019)
shiny_data_2014_2019 <- bind_rows(indices_2014, indices_2015, indices_2016, indices_2017, indices_2018, indices_2019)
shiny_data_2014_2019
write_rds(shiny_data_2014_2019, "UnispecRecord/Visualizations/shiny_unispec_cleaned/indices_2014-2018.rds")
index_data <- read_rds("indices_2014-2018.rds") #load dataframe "index_data"
runApp('UnispecRecord/Visualizations/shiny_unispec_cleaned')
getwd()
## Load new data for shiny
df_2014 <- read_rds("UnispecRecord/UnispecData/2014_processed_xlsx_data.rds")
df_2014
unispec_problem_key_2014 <- read_csv("UnispecRecord/UnispecData/2014_unispec_key_problems.csv", skip_empty_rows = T, col_types = cols(ref_problems = col_character())) %>%
mutate_at(.funs = factor, .vars = vars("Site", "Block", "Treatment", "Replicate", "key_fix", "ref_problems")) %>%
left_join(read_csv("UnispecRecord/UnispecData/2015_raw_spu_key.csv") %>% select(spu_filename, DateTime))
unispec_data_2014 <- unispec_problem_key_2014 %>%
filter(!is.na(Treatment)) %>%
filter(!file_problem) %>% left_join(df_2014) %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any)) %>%
rename(Spectra = multispec_spectra)
unispec_data_2014
unispec_problem_key_2014
unispec_problem_key_2014 %>% summary()
unispec_problem_key_2014 %>%
filter(!is.na(Treatment)) %>%
filter(! file_problem)
unispec_problem_key_2014 %>%
filter(!is.na(Treatment)) %>%
filter(! file_problem) %>% left_join(df_2014) %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any))
df_2014
## Load new data for shiny
df_2014 <- read_rds("UnispecRecord/UnispecData/2014_processed_xlsx_data.rds") %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any)) %>%
unispec_problem_key_2014 <- read_csv("UnispecRecord/UnispecData/2014_unispec_key_problems.csv", skip_empty_rows = T, col_types = cols(ref_problems = col_character())) %>%
mutate_at(.funs = factor, .vars = vars("Site", "Block", "Treatment", "Replicate", "key_fix", "ref_problems")) %>%
left_join(read_csv("UnispecRecord/UnispecData/2015_raw_spu_key.csv") %>% select(spu_filename, DateTime))
## Load new data for shiny
df_2014 <- read_rds("UnispecRecord/UnispecData/2014_processed_xlsx_data.rds") %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any))
unispec_data_2014 <- unispec_problem_key_2014 %>%
filter(!is.na(Treatment)) %>%
filter(! file_problem) %>% left_join(df_2014) %>%
rename(Spectra = multispec_spectra)
indices_2014 <- unispec_data_2014 %>%
## Calculate NDVI
mutate(Indices = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = "MODIS", indices = c("NDVI", "EVI", "EVI2"))))
## Load new data for shiny
df_2014 <- read_rds("UnispecRecord/UnispecData/2014_processed_xlsx_data.rds") %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any))
df_2014
df_2014
unispec_data_2014 <- unispec_problem_key_2014 %>%
filter(!is.na(Treatment)) %>%
filter(! file_problem) %>% left_join(df_2014) %>%
rename(Spectra = multispec_spectra)
indices_2014 <- unispec_data_2014 %>%
## Calculate NDVI
mutate(Indices = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = "MODIS", indices = c("NDVI", "EVI", "EVI2"))))
indices_2014 <- unispec_data_2014 %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any)) %>%
## Calculate NDVI
mutate(Indices = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = "MODIS", indices = c("NDVI", "EVI", "EVI2"))))
indices_2014 <- unispec_data_2014 %>%
filter(! Spectra%>% map(is.null) %>% map_lgl(any)) %>%
## Calculate NDVI
mutate(Indices = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = "MODIS", indices = c("NDVI", "EVI", "EVI2"))))
## Load new data for shiny
df_2014 <- read_rds("UnispecRecord/UnispecData/2014_processed_xlsx_data.rds") %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any))
df_2014
df_2014 %>% filter(multispec_spectra %>% map(is.null) %>% map_lgl(any))
df_2014 %>% select(Indices[1])
df_2014 %>% select(Indices) %>% slice(1)
df_2014$Indices[1]
df_2014$Spectra[1]
df_2014$Spectra[2
df_2014$Spectra[2]
## Load new data for shiny
df_2014 <- read_rds("UnispecRecord/UnispecData/2014_unispec_data.rds")
df_2014
%>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any))
## Load new data for shiny
df_2014 <- read_rds("UnispecRecord/UnispecData/2014_unispec_data.rds") %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any))
## Load new data for shiny
df_2014 <- read_rds("UnispecRecord/UnispecData/2014_unispec_data.rds") %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any))
df_2014
unispec_data_2014 <- unispec_problem_key_2014 %>%
filter(!is.na(Treatment)) %>%
filter(! file_problem) %>% left_join(df_2014) %>%
rename(Spectra = multispec_spectra)
indices_2014 <- unispec_data_2014 %>%
## Calculate NDVI
mutate(Indices = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = "MODIS", indices = c("NDVI", "EVI", "EVI2"))))
unispec_data_2014
df_2014
unispec_data_2014 <- unispec_problem_key_2014 %>%
filter(!is.na(Treatment)) %>%
filter(! file_problem) %>% left_join(df_2014) %>%
select(-Spectra) %>%
rename(Spectra = multispec_spectra)
indices_2014 <- unispec_data_2014 %>%
## Calculate NDVI
mutate(Indices = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = "MODIS", indices = c("NDVI", "EVI", "EVI2"))))
unispec_data_2014
unispec_data_2014%>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any))
unispec_data_2014%>%
filter(! Spectra %>% map(is.null) %>% map_lgl(any))
unispec_data_2014 <- unispec_problem_key_2014 %>%
filter(!is.na(Treatment)) %>%
filter(! file_problem) %>% left_join(df_2014) %>%
select(-Spectra) %>%
rename(Spectra = multispec_spectra) %>% filter(!missing_spu)
unispec_data_2014
df_2014$Spectra[1]
## Load new data for shiny
df_2014 <- read_rds("UnispecRecord/UnispecData/2014_unispec_data.rds") %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any))
df_2014
df_2014$multispec_spectra
## Load new data for shiny
df_2014 <- read_rds("UnispecRecord/UnispecData/2014_unispec_data.rds") %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any)) %>%
select(-Spectra) %>%
rename(Spectra = multispec_spectra)
## Load new data for shiny
df_2014 <- read_rds("UnispecRecord/UnispecData/2014_unispec_data.rds") %>%
filter(! multispec_spectra %>% map(is.null) %>% map_lgl(any)) %>%
select(-Spectra) %>%
rename(Spectra = multispec_spectra) %>%
## Calculate NDVI
mutate(Indices = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = "MODIS", indices = c("NDVI", "EVI", "EVI2"))))
df_2014
indices_2014 <- df_2014
write_rds(indices_2014, "UnispecRecord/UnispecData/2014_index_data.rds")
unispec_problem_key_2014 <- read_csv("UnispecRecord/UnispecData/2014_unispec_key_problems.csv", skip_empty_rows = T, col_types = cols(ref_problems = col_character())) %>%
mutate_at(.funs = factor, .vars = vars("Site", "Block", "Treatment", "Replicate", "key_fix", "ref_problems")) %>%
left_join(read_csv("UnispecRecord/UnispecData/2015_raw_spu_key.csv") %>% select(spu_filename, DateTime))
indices_2014
read_rds("UnispecRecord/UnispecData/2014_index_data.rds")
indices_2014 <- read_rds("UnispecRecord/UnispecData/2014_index_data.rds") %>%
left_join(read_csv("UnispecRecord/UnispecData/2014_raw_spu_key.csv") %>% select(spu_filename, DateTime)) %>%
left_join(unispec_problem_key_2014) %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Date = lubridate::date(Date)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>%
unnest(Indices) %>% spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
indices_2014
indices_2014
df_2014
unispec_data_2014 <- unispec_problem_key_2014 %>% left_join(df_2014)
unispec_data_2014
unispec_data_2014$Indices[1]
df_2014
unispec_data_2014 <- df_2014 %>% left_join(unispec_problem_key_2014)
unispec_data_2014
indices_2014 <- unispec_data_2014 %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Date = lubridate::date(Date)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>%
unnest(Indices) %>% spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
indices_2014
unispec_data_2014 <- df_2014 %>% left_join(unispec_problem_key_2014)
unispec_data_2014
indices_2014 <- unispec_data_2014 %>%
mutate(Year = as.integer(lubridate::year(DateTime))) %>%
mutate(Date = lubridate::date(DateTime)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>%
unnest(Indices) %>% spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
indices_2014
unispec_data_2014 <- df_2014 %>% left_join(unispec_problem_key_2014)
unispec_data_2014
unispec_data_2014 %>% select(Site:FileNum, spu_filename, DateTime, Spectra, Indices)
df_2014
unispec_problem_key_2014 <- read_csv("UnispecRecord/UnispecData/2014_unispec_key_problems.csv", skip_empty_rows = T, col_types = cols(ref_problems = col_character())) %>%
mutate_at(.funs = factor, .vars = vars("Site", "Block", "Treatment", "Replicate", "key_fix", "ref_problems")) %>%
left_join(read_csv("UnispecRecord/UnispecData/2014_raw_spu_key.csv") %>% select(spu_filename, DateTime))
unispec_data_2014 <- df_2014 %>% left_join(unispec_problem_key_2014)
unispec_problem_key_2014
unispec_data_2014 <- df_2014 %>% left_join(unispec_problem_key_2014)
unispec_data_2014
unispec_data_2014 <- unispec_problem_key_2014 %>% right_join(df_2014)
unispec_data_2014
indices_2014 <- unispec_data_2014 %>%
mutate(Year = as.integer(lubridate::year(DateTime))) %>%
mutate(Date = lubridate::date(DateTime)) %>%
mutate(DOY = as.integer(lubridate::yday(Date))) %>%
mutate(Block = as.integer(str_extract(Block, pattern = "[0-9]"))) %>%
mutate(Replicate = as.character(Replicate)) %>%
rename(Time = DateTime) %>%
unnest(Indices) %>% spread(Index, Value) %>%
select(Year, Date, DOY, Time, Site, Block, Treatment, Replicate, FileNum, NDVI, EVI, EVI2)
indices_2014## 2015
shiny_data <- bind_rows(indices_2014, indices_2015, indices_2016, indices_2017, indices_2018, indices_2019)
## Standardize Names
Site_Names <- list(HTH = "DHT", DH ="DHT", LDHT = "DHT", DHTB = "DHT", DHTPC = "DHT", HST = "HIST", HIS="HIST",
LOF = "LMAT",  LOFB = "LMAT", LNB = "LMAT", LOFRB ="LMAT",
MATB="MAT", MATSL= "MAT", MATBK = "MAT",
MANTB ="MNAT",MNATB ="MNAT", NAMTB = "MNAT",
NMNT = "NANT", NANTB ="NANT", JULNB ="NANT",NMNTB ="NANT",
LSHB= "SHB", SHBB = "SHB", SHRBB = "SHB", SHRB = "SHB",
LWSG = "WSG", WSGB = "WSG", WS ="WSG", WSB = "WSG", WSDB = "WSG", TEST = "LAB2")
# Check for different spelling of site names
unique(shiny_data$Site)
shiny_data$Site <- recode (shiny_data$Site, !!!Site_Names, .default = shiny_data$Site)
write_rds(shiny_data, "UnispecRecord/Visualizations/shiny_unispec_cleaned/indices_2014-2019.rds")
runApp('UnispecRecord/Visualizations/shiny_unispec_cleaned')
indices_2014
shiny_data <- bind_rows(indices_2014, indices_2015, indices_2016, indices_2017, indices_2018, indices_2019)
shiny_data
shiny_data <- bind_rows(indices_2014, indices_2015, indices_2016, indices_2017, indices_2018, indices_2019)
## Standardize Names
Site_Names <- list(DHT = "HTH", DH ="HTH", LHTH = "HTH", HTHB = "HTH", HTHPC = "HTH", HST = "HIST", HIS="HIST",
LOF = "LMAT",  LOFB = "LMAT", LNB = "LMAT", LOFRB ="LMAT",
MATB="MAT", MATSL= "MAT", MATBK = "MAT",
MANTB ="MNAT",MNATB ="MNAT", NAMTB = "MNAT",
NMNT = "NANT", NANTB ="NANT", JULNB ="NANT",NMNTB ="NANT",
LSHB= "SHB", SHBB = "SHB", SHRBB = "SHB", SHRB = "SHB",
LWSG = "WSG", WSGB = "WSG", WS ="WSG", WSB = "WSG", WSDB = "WSG", TEST = "LAB2")
# Check for different spelling of site names
unique(shiny_data$Site)
shiny_data$Site <- recode (shiny_data$Site, !!!Site_Names, .default = shiny_data$Site)
write_rds(shiny_data, "UnispecRecord/Visualizations/shiny_unispec_cleaned/indices_2014-2019.rds")
unique(shiny_data$Site)
## Standardize Names
Site_Names <- list(DHT = "HTH", DH ="HTH", LHTH = "HTH", HTHB = "HTH", HTHPC = "HTH", HST = "HIST", HIS="HIST",
LOF = "LMAT",  LOFB = "LMAT", LNB = "LMAT", LOFRB ="LMAT",
MATB="MAT", MATSL= "MAT", MATBK = "MAT",
MANTB ="MNAT",MNATB ="MNAT", NAMTB = "MNAT",
NMNT = "NANT", NANTB ="NANT", JULNB ="NANT",NMNTB ="NANT",
LSHB= "SHB", SHBB = "SHB", SHRBB = "SHB", SHRB = "SHB",
LWSG = "WSG", WSGB = "WSG", WS ="WSG", WSB = "WSG", WSDB = "WSG", TEST = "LAB2", WSG1 = "WSG", WSG23 = "WSG", SHB1 = "SHB", SHB2 = "SHB")
# Check for different spelling of site names
unique(shiny_data$Site)
shiny_data$Site <- recode (shiny_data$Site, !!!Site_Names, .default = shiny_data$Site)
unique(shiny_data$Site)
write_rds(shiny_data, "UnispecRecord/Visualizations/shiny_unispec_cleaned/indices_2014-2019.rds")
runApp('UnispecRecord/Visualizations/shiny_unispec_cleaned')
shiny_data %>% filter(Year == "2014")
index_data <- shiny_data
year_list <- seq(min(index_data$Year), max(index_data$Year), by = 1)
index_data
year_list <- seq(min(index_data$Year), max(index_data$Year), by = 1)
index_data$Year
index_data$Year %>% min()
shiny_data
shiny_data$Year %>% min()
shiny_data %>% filter(is.na(Year))
shiny_data %>% filter(is.na(Year)) %>% print(n=100)
shiny_data <- bind_rows(indices_2014, indices_2015, indices_2016, indices_2017, indices_2018, indices_2019) %>%
filter(!is.na(DOY))
## Standardize Names
Site_Names <- list(DHT = "HTH", DH ="HTH", LHTH = "HTH", HTHB = "HTH", HTHPC = "HTH", HST = "HIST", HIS="HIST",
LOF = "LMAT",  LOFB = "LMAT", LNB = "LMAT", LOFRB ="LMAT",
MATB="MAT", MATSL= "MAT", MATBK = "MAT",
MANTB ="MNAT",MNATB ="MNAT", NAMTB = "MNAT",
NMNT = "NANT", NANTB ="NANT", JULNB ="NANT",NMNTB ="NANT",
LSHB= "SHB", SHBB = "SHB", SHRBB = "SHB", SHRB = "SHB",
LWSG = "WSG", WSGB = "WSG", WS ="WSG", WSB = "WSG", WSDB = "WSG", TEST = "LAB2", WSG1 = "WSG", WSG23 = "WSG", SHB1 = "SHB", SHB2 = "SHB")
# Check for different spelling of site names
unique(shiny_data$Site)
shiny_data$Site <- recode (shiny_data$Site, !!!Site_Names, .default = shiny_data$Site)
unique(shiny_data$Site)
write_rds(shiny_data, "UnispecRecord/Visualizations/shiny_unispec_cleaned/indices_2014-2019.rds")
index_data <- shiny_data
year_list <- seq(min(index_data$Year), max(index_data$Year), by = 1)
runApp('UnispecRecord/Visualizations/shiny_unispec_cleaned')
year_list
shiny_data
index_data <- read_rds("UnispecRecord/Visualizations/shiny_unispec_cleaned/indices_2014-2019.rds")
index_data
runApp('UnispecRecord/Visualizations/shiny_unispec_cleaned')
year_list
year_list <- seq(min(index_data$Year), max(index_data$Year), by = 1)
year_list
index_data
runApp('UnispecRecord/Visualizations/shiny_unispec_cleaned')
index_data %>% summary()
index_data %>% filter(Year == "2014") %>% summary()
index_data %>% filter(Year == "2014") %>% mutate_at(vars(Site, Block, Treatment, Replicate), funs(factor)) summary()
index_data %>% filter(Year == "2014") %>% mutate_at(vars(Site, Block, Treatment, Replicate), fun(factor)) summary()
index_data %>% filter(Year == "2014") %>% mutate_at(vars(Site, Block, Treatment, Replicate), fun(factor)) %>%  summary()
index_data %>% filter(Year == "2014") %>% mutate_at(vars(Site, Block, Treatment, Replicate), funs(factor)) %>%  summary()
index_data <- read_rds("UnispecRecord/Visualizations/shiny_unispec_cleaned/indices_2014-2019.rds")
index_data
