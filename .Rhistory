SHB <- c("SHB1", "SHB2")
site_list <- list("MAT", "LMAT", "MNAT", "NANT", "DHT", WSG, SHB, "HST")
CT <- c("CT","CT1","CT2")
NP_gradient <- c("F0.5","F1","F2","F5","F10") # for LOF site
N_types <- c("NO3", "NH4") # for LOF site
trtmt_list <- list(CT, "N", "P", "NP", NP_gradient, N_types)
## Useful vectors for plotting
# Color sequences
pur_pal <- RColorBrewer::brewer.pal(5, "Purples")
## INTERACTIVE CODE (use when in RStudio)
library("rChoiceDialogs") # for interactively selecting file directories
data_path <- rchoose.dir(caption = "Select Unispec files directory")
## STATIC CODE (use when Knitting)
#data_path  <- "UnispecData/Unispec6/"
## INTERACTIVE CODE (use when in RStudio)
library("rChoiceDialogs") # for interactively selecting file directories
data_path <- rchoose.dir(caption = "Select Unispec files directory")
## STATIC CODE (use when Knitting)
#data_path  <- "UnispecData/Unispec6/"
if (interactive())
choose.files(filters = Filters[c("zip", "All"),])
?choose.files
?utils
library(utils)
library("utils")
ls
?choose.files
?file.choose
files.choose
utils::file.choose
?windows
??windows
?`rChoiceDialogs
?rChoiceDialogs
key_files <- rchoose.files()
## Read in data from filekeys
key_list <- data_frame(keyname = key_files) %>% # create dataframe
mutate(key_contents = map(keyname, function(x) read_key_file(x)))
key_files
?interactive()
if (interactive()) {
## INTERACTIVE CODE (use when in RStudio)
library("rChoiceDialogs") # for interactively selecting file directories
data_path <- rchoose.dir(caption = "Select Unispec files directory")
} else {
## STATIC CODE (use when Knitting)
data_path  <- "UnispecData/Unispec6/"
}
interact <- interactive() # T or F value
# interact <- F # set manually to search for a file name pattern instead of select via window
if (interact) {
key_files <- rchoose.files() # choose via window
} else {
## Find all file keys: alter search pattern to choose specific key(s)
key_files <- list.files(path = data_path, pattern = "*_key.csv", full.names = T, recursive = T)
}
## Read in data from filekeys
key_list <- data_frame(keyname = key_files) %>% # create dataframe
mutate(key_contents = map(keyname, function(x) read_key_file(x)))
# read_key_file() is a function I wrote located in the file "unispec_functions.R"
# map function: super useful to apply function to objects without slow "for" loops
## Unpack into usable dataframe
keys <- unnest(key_list)
?choose.files
?rchoose.files
?getDefaultFilters
key_files <- rchoose.files(filters=c(".csv")) # choose via window
key_files <- rchoose.files(filters=c("*.csv")) # choose via window
files <- rchoose.files(filter=c("*.spu$")) # choose via window
files <- rchoose.files(filter=c("*.spu")) # choose via window
files
ref_choice <- df %>%
filter(Treatment == "REF") %>%
select(Date, Site, Block, Weather, Notes, Measurement, FileNum) %>%
distinct() %>%
mutate(Measurement = str_c("P", Measurement))
ref_choice
ref_choice <- df %>%
filter(Treatment == "REF") %>%
select(Date, Site, Block, Weather, Notes, Measurement, FileNum) %>%
distinct() %>%
mutate(Measurement = str_c("P", Measurement))%>%
spread(Measurement, FileNum)
ref_choice
## Output Table of Chosen References
ref_choice <- df %>%
filter(Treatment == "REF") %>%
select(Date, Site, Block, Weather, Notes, Measurement, FileNum) %>%
distinct() %>%
mutate(Measurement = str_c("P", Measurement))%>%
spread(Measurement, FileNum) %>%
unite(FileNums, P1:P5, sep=",")
ref_choice
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>% # group_by(Date,Site,Block,Wavelength, int) %>%
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes, filename))
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>% # group_by(Date,Site,Block,Wavelength, int) %>%
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(filename))
filename
ref_summary
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>% # group_by(Date,Site,Block,Wavelength, int) %>%
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = c(filename))
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>% # group_by(Date,Site,Block,Wavelength, int) %>%
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(filename))
## Join DATA with REFS
df_ref <- inner_join(df, ref_summary) %>%
select(Date, Time, Site, Block, Treatment, Measurement, Wavelength,  int, int_REF, ChB, ChA, ChB_REF, ChA_REF, CorrectionFactor_REF, Weather, Notes, Notes_REF, filename, FileNum, keyname) %>%
mutate(raw = ChB/ChA) %>% # the raw reflectance
mutate(correct = raw*CorrectionFactor_REF) %>% # this step calculates the corrected reflectance
gather(Type, Reflectance, raw:correct)
ref_summary$Notes_REF
df_tidy
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, int) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes), FileNames_REF = list(filename))
## Join DATA with REFS
df_ref <- inner_join(df, ref_summary) %>%
select(Date, Time, Site, Block, Treatment, Measurement, Wavelength,  int, int_REF, ChB, ChA, ChB_REF, ChA_REF, CorrectionFactor_REF, Weather, Notes, Notes_REF, filename, FileNum, keyname) %>%
mutate(raw = ChB/ChA) %>% # the raw reflectance
mutate(correct = raw*CorrectionFactor_REF) %>% # this step calculates the corrected reflectance
gather(Type, Reflectance, raw:correct)
df_tidy <- df_ref %>%
mutate(Site = replace(Site, Site %in% WSG, "WSG")) %>% # rename WSG1 & WSG23 to WSG
mutate(Site = replace(Site, Site %in% SHB, "SHB")) %>%  # rename  SHB1 & SHB2 to SHB
filter(Type == "correct") %>% # drop raw reflectance
select(-Type)
df_tidy
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, int) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes), FileNames_REF = list(filename))
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, int) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes), FileNames_REF = list(filename))
## Join DATA with REFS
df_ref <- inner_join(df, ref_summary) %>%
select(Date, Time, Site, Block, Treatment, Measurement, Wavelength,  int, int_REF, ChB, ChA, ChB_REF, ChA_REF, CorrectionFactor_REF, Weather, Notes, Notes_REF, FileNames_REF, filename, FileNum, keyname) %>%
mutate(raw = ChB/ChA) %>% # the raw reflectance
mutate(correct = raw*CorrectionFactor_REF) %>% # this step calculates the corrected reflectance
gather(Type, Reflectance, raw:correct)
df_tidy <- df_ref %>%
mutate(Site = replace(Site, Site %in% WSG, "WSG")) %>% # rename WSG1 & WSG23 to WSG
mutate(Site = replace(Site, Site %in% SHB, "SHB")) %>%  # rename  SHB1 & SHB2 to SHB
filter(Type == "correct") %>% # drop raw reflectance
select(-Type)
df_tidy
if (save) {
# SAVE CORRECTED SPECTRA if you want the dataframe or .csv for later
unispec_data <- df_tidy %>%
filter(Type=="correct") %>%
select(-Type)
save(unispec_data, file = "unispec_data_correct.Rda")
} else ()
save <- T
if (save == T) {
# SAVE CORRECTED SPECTRA if you want the dataframe or .csv for later
unispec_data <- df_tidy %>%
filter(Type=="correct") %>%
select(-Type)
write_csv(unispec_data, "unispec_data_correct.csv")
}
# filter(Type == "correct") %>% # drop raw reflectance
# select(-Type)
df_tidy <- df_ref %>%
mutate(Site = replace(Site, Site %in% WSG, "WSG")) %>% # rename WSG1 & WSG23 to WSG
mutate(Site = replace(Site, Site %in% SHB, "SHB"))# %>%  # rename  SHB1 & SHB2 to SHB
if (save == T) {
# SAVE CORRECTED SPECTRA if you want the dataframe or .csv for later
unispec_data <- df_tidy %>%
filter(Type=="correct") %>%
select(-Type)
write_csv(unispec_data, "unispec_data_correct.csv")
}
df_tidy %>% select(FileNames_REF)
df_tidy %>% select(FileNames_REF) %>% unlist(recursive = F)
# SAVE CORRECTED SPECTRA if you want the dataframe or .csv for later
unispec_data <- df_tidy %>%
filter(Type=="correct") %>%
select(-Type) %>%
mutate(Notes_REF = unlist(Notes_REF, recursive = F))
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, int) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes), FileNames_REF = list(filename))
ref_summary
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, int) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes), FileNames_REF = list(filename)) %>%
mutate(FileNames_REF = unlist(FileNames_REF, recursive = F))
900/5
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, int) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes), FileNames_REF = list(filename)) %>%
mutate(FileNames_REF = c(unlist(FileNames_REF, recursive = F)))
ref_summary$FileNames_REF
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, int) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes), FileNames_REF = list(filename))
ref_summary
ref_summary %>% select(FileNames_REF)
listtest <- ref_summary %>% select(FileNames_REF) %>% distinct()
listtest
listtest <- ref_summary %>% select(FileNames_REF) %>% unique()
listtest
listtest %>% select(FileNames_REF)
listtest$FileNames_REF
listtest$FileNames_REF %>% unlist()
listtest$FileNames_REF %>% unlist(recursive = F)
listtest$FileNames_REF %>% str
listtest$FileNames_REF %>% str()
listtest[1,]
listtest[1,] %>% str()
?str_squish
listest %>% mutate(filenames = str_squish(FileNames_REF))
listtest %>% mutate(filenames = str_squish(FileNames_REF))
warnings()
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, int) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes), FileNames_REF = str_c(filename))
?str_squish
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, int) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes), FileNames_REF = str_c(filename,collapse = ", "))
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wav
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, int) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = list(Notes), FileNames_REF = str_c(filename,collapse = ", "))
ref_summary
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, int) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor_REF = mean(ChA/ChB), int_REF = mean(int), Notes_REF = str_c(Notes, collapse = "; "), FileNames_REF = str_c(filename,collapse = ", "))
ref_summary
ref_summary %>% filter(!is.na(Notes_REF))
## Join DATA with REFS
df_ref <- inner_join(df, ref_summary) %>%
select(Date, Time, Site, Block, Treatment, Measurement, Wavelength,  int, int_REF, ChB, ChA, ChB_REF, ChA_REF, CorrectionFactor_REF, Weather, Notes, Notes_REF, FileNames_REF, filename, FileNum, keyname) %>%
mutate(raw = ChB/ChA) %>% # the raw reflectance
mutate(correct = raw*CorrectionFactor_REF) %>% # this step calculates the corrected reflectance
gather(Type, Reflectance, raw:correct)
df_tidy <- df_ref %>%
mutate(Site = replace(Site, Site %in% WSG, "WSG")) %>% # rename WSG1 & WSG23 to WSG
mutate(Site = replace(Site, Site %in% SHB, "SHB"))# %>%  # rename  SHB1 & SHB2 to SHB
# SAVE CORRECTED SPECTRA if you want the dataframe or .csv for later
unispec_data <- df_tidy %>%
filter(Type=="correct") %>%
select(-Type) %>%
mutate(Notes_REF = unlist(Notes_REF, recursive = F))
# SAVE CORRECTED SPECTRA if you want the dataframe or .csv for later
unispec_data <- df_tidy %>%
filter(Type=="correct") %>%
select(-Type)
unispec_data
write_csv(unispec_data, "unispec_data_correct.csv")
write_rds(unispec_data, "unispec_data_correct.rds")
shiny::runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
?column
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
?renderXX()
?renderXX()
?reactive()
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
names(index_data1)
names(index1_data)
# Load data from 2017  -------------------------------------------------
load("UnispecData/multispec_data_2017.Rda")
tidy_multispec_data_2017 <- multispec_data_2017 %>% filter(Type=="correct") %>%
filter(Treatment %in% trtmt_list)
indices_2017 <- calculate_index(tidy_multispec_data_2017) %>%
ungroup() %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Block = as.integer(str_extract(Block, "\\d"))) %>%
mutate(Measurement = as.integer(Measurement)) %>%
mutate(DOY = as.integer(lubridate::yday(Date)))
tidy_multispec_data_2017
tidy_multispec_data_2017 %>% summary()
indices_2017 <- calculate_index(tidy_multispec_data_2017) %>%
ungroup()
# FUNCTIONS ---------------------------------------------------------------
source("unispec_functions.R")
indices_2017 <- calculate_index(tidy_multispec_data_2017) %>%
ungroup() %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Block = as.integer(str_extract(Block, "\\d"))) %>%
mutate(Measurement = as.integer(Measurement)) %>%
mutate(DOY = as.integer(lubridate::yday(Date)))
indices_2017 <- calculate_index(tidy_multispec_data_2017,  indices = c("NDVI", "EVI",  "WBI", "Chl")) %>%
ungroup() %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Block = as.integer(str_extract(Block, "\\d"))) %>%
mutate(Measurement = as.integer(Measurement)) %>%
mutate(DOY = as.integer(lubridate::yday(Date)))
indices_2017
source('~/UnispecR/unispec_functions.R')
indices_2017 <- calculate_index(tidy_multispec_data_2017,  indices = c("NDVI", "EVI",  "WBI", "Chl")) %>%
ungroup() %>%
mutate(Year = as.integer(lubridate::year(Date))) %>%
mutate(Block = as.integer(str_extract(Block, "\\d"))) %>%
mutate(Measurement = as.integer(Measurement)) %>%
mutate(DOY = as.integer(lubridate::yday(Date)))
names(indices_2017)
source('~/UnispecR/unispec_functions.R')
names(sub_data)
runApp('shiny_unispec')
install.packages("DT")
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
?formatRound
runApp('shiny_unispec')
runApp('shiny_unispec')
data$ctl_comp_sub_data <- ctl_comp_data %>%
select(Year, DOY, Date, Site, Treatment, contains(which_index)) %>%
formatRound(columns= c("NDVI_mean"), digits=3)
runApp('shiny_unispec')
runApp('shiny_unispec')
?match()
names(sub_data)
names(index1_data)
match(names(index1_data), "NDVI")
match(names(index1_data), "EVI")
?formatRound
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
tagList()
?tag
?Tags
?tags
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
runApp('shiny_unispec')
source('~/UnispecR/compare_multispec_vs_rscript.R')
source('~/UnispecR/compare_multispec_vs_rscript.R')
# REQUIRED PACKAGES -------------------------------------------------------
require(tidyverse)
require(stringr)
require(lubridate)
## Useful vectors for standardizing names and filtering rows
WSG <- c("WSG1", "WSG2", "WSG3", "WSG23")
SHB <- c("SHB1", "SHB2")
site_list <- list("MAT", "LMAT", "MNAT", "NANT", "DHT", WSG, SHB, "HST")
CT <- c("CT","CT1","CT2")
NP <- c("F0.5","F1","F2","F5","F10","NP", "NO3", "NH4")
trtmt_list <- list(CT, "N", "P", NP)
calculate_ndvi_process <- function(tidydata, nir = c(820,890), red = c(640, 680)) {
## This is specific to this file, to compare processing types
red_data <- tidydata %>%
filter(Wavelength >= red[1] & Wavelength <= red[2]) %>%
group_by(Site, Block, Treatment, Date, Measurement, Type, ProcessType) %>%
summarise(
red = mean(Reflectance)
)
nir_data <- tidydata %>%
filter(Wavelength >= nir[1] & Wavelength <= nir[2]) %>%
group_by(Site, Block, Treatment, Date, Measurement,Type, ProcessType) %>%
summarise(
nir = mean(Reflectance)
)
ndvi_data <- inner_join(nir_data, red_data) %>%
mutate(ndvi = (nir-red)/(red+nir))
return(ndvi_data)
}
# LOAD DATA ---------------------------------------------------------------
load("UnispecData/multispec_data_2018.Rda")
load("UnispecData/rscript_data_2018.Rda")
load("UnispecData/rscript_data_2018.Rda")
df_multispec <- multispec_data_2018 %>%
mutate(ProcessType = "multispec") %>%
#select(Date, Site, Block, Treatment, Measurement, Wavelength, Reflectance, Type) %>%
filter(Wavelength >= 400 & Wavelength <= 1100)  %>% # Choose relevent wavelengths
mutate(Site = replace(Site, Site %in% WSG, "WSG")) %>% # tidy : combine WSG1 & WSG23
mutate(Site = replace(Site, Site %in% SHB, "SHB"))   # tidy : combine SHB1 & SHB2
df_types <- rscript_data_2018 %>%
mutate(ProcessType = "rscript") %>%
filter(Wavelength >= 400 & Wavelength <= 1100)  %>% # Choose relevent wavelengths
mutate(Site = replace(Site, Site %in% WSG, "WSG")) %>% # tidy : combine WSG1 & WSG23
mutate(Site = replace(Site, Site %in% SHB, "SHB")) %>%  # tidy : combine SHB1 & SHB2
bind_rows(df_multispec)
## PLOT SELECTION
### change the following vectors to explore all data
### facet based on selection to explore across blocks, sites, etc.
### default plot has dates on the x-axis
sites <-c("MAT")
blocks <- c("B4") # c("B1", "B2", "B3", "B4")
trtmts <- c("CT2") # c(CT, NP, "N", "P"), careful of CT1 & CT2 sites
measures <- c("1", "2", "3", "4", "5")
## FILTER dataframe based on SELECTION
df_plot <- df_types %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
filter(Measurement %in% measures) #%>%
## PLOT SELECTED DATA
ggplot(data = df_plot, mapping = aes(x = Wavelength, y = Reflectance, linetype=ProcessType)) +
geom_line(aes(color=Type)) +
facet_grid(Measurement ~ Date)
sites <-c("MAT") #
blocks <- c("B1") # c("B1", "B2", "B3", "B4")
trtmts <- c("CT1") # c("CT", "NP", "N", "P")
measures <- c("1", "2", "3", "4", "5")
ndvi_types <- df_types %>%
filter(Date %in% dates) %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
calculate_ndvi_process()
ndvi_plot <- ndvi_types
ggplot(data = ndvi_plot, mapping = aes(x = ProcessType, y=ndvi, fill=Type)) +
geom_bar(stat="identity") +
facet_grid( Measurement ~ Type)
## PLOT SELECTION over DATES
sites <-c("MAT") #
blocks <- c("B1") # c("B1", "B2", "B3", "B4")
trtmts <- c("CT1") # c("CT", "NP", "N", "P")
measures <- c("1", "2", "3", "4", "5")
ndvi_types <- df_types %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
calculate_ndvi_process()
ndvi_plot <- ndvi_types
ggplot(data = ndvi_plot, mapping = aes(x = Date, y = ndvi, color = Type, linetype = ProcessType)) +
geom_point() +
geom_line() +
facet_grid( Measurement ~ Type)
## PLOT SELECTION for Individual Date
### change the following vectors to explore all data over dates
dates <- df_types %>% select(Date) %>% unique() %>% slice(1:n()) %>% c()
dates <- dates[[1]]
sites <-c("MAT") #
blocks <- c("B1") # c("B1", "B2", "B3", "B4")
trtmts <- c("CT1") # c("CT", "NP", "N", "P")
measures <- c("1", "2", "3", "4", "5")
ndvi_types <- df_types %>%
filter(Date %in% dates) %>%
filter(Site %in% sites) %>%
filter(Block %in% blocks) %>%
filter(Treatment %in% trtmts) %>%
calculate_ndvi_process()
ndvi_plot <- ndvi_types
ggplot(data = ndvi_plot, mapping = aes(x = ProcessType, y=ndvi, fill=Type)) +
geom_bar(stat="identity") +
facet_grid( Measurement ~ Type)
