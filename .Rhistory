## The following steps expand the "Block" column to create one REF set per Block per Site. This structure is necessary for situtations where different refs are used for different blocks at the same site.
separate(Block, into = c("BX1", "BX2", "BX3", "BX4"), sep = ",") %>% #1: expand string entry in "Block" into separate columns -- NOTE: this step throws a "Warning: Expected 4 pieces." for sites w/less than 4 blocks
gather(Block, BlockString, BX1:BX4) %>% #2: re-condense into one column, generates correct number of rows per site AND per block
mutate(Block = str_squish(BlockString), BlockString=NULL) %>% #3: replace placeholder column names w/"B1-B4". Also removes whitespace from BlockString contents introduced by "separate" function
filter(!is.na(Block)) %>% #4: remove empty rows for sites w/out B3 or B4
### Unnest Spectra & calculate
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(CorrectionFactor = 1/Reflectance) %>%
### The following code group repeated REF measurements, and takes the mean
group_by(Date,Site,Block,Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, Integration_ms) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor = mean(ChA/ChB), int_REF = mean(Integration_ms), Notes_REF = str_c(Notes, collapse = "; "), ref_filenames = str_c(spu_filename,collapse = ", "))
# Apply references to raw spu data ==> Dataframe of corrected spu spectra
corrected_data <- raw_data %>%
filter(!str_detect(Treatment, "REF|DARK")) %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
corrected_data
df_corrected <- df_ref %>%
nest(Wavelength:Reflectance, .key = processed_spectra)
left_join(ref_summary) %>%
select(Date, DateTime, Site, Block, Treatment, Replicate, spu_filename, FileNum, Integration_ms, Weather, Notes, Notes_REF, ref_filenames, int_REF, Wavelength, ChB, ChA, ChB_REF, ChA_REF, CorrectionFactor) %>%
mutate(raw_reflectance = ChB/ChA) %>% # the raw reflectance
mutate(Reflectance = raw_reflectance*CorrectionFactor) %>%  # the corrected reflectance
nest(Wavelength:Reflectance, .key = Spectra)
# Apply references to raw spu data ==> Dataframe of corrected spu spectra
corrected_data <- raw_data %>%
filter(!str_detect(Treatment, "REF|DARK")) %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
# Apply references to raw spu data ==> Dataframe of corrected spu spectra
corrected_data <- raw_data %>%
filter(!str_detect(Treatment, "REF|DARK")) %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
left_join(ref_summary) %>%
select(Date, DateTime, Site, Block, Treatment, Replicate, spu_filename, FileNum, Integration_ms, Weather, Notes, Notes_REF, ref_filenames, int_REF, Wavelength, ChB, ChA, ChB_REF, ChA_REF, CorrectionFactor) %>%
mutate(raw_reflectance = ChB/ChA) %>% # the raw reflectance
mutate(Reflectance = raw_reflectance*CorrectionFactor) %>%  # the corrected reflectance
nest(Wavelength:Reflectance, .key = Spectra)
corrected_data
corrected_data$Spectra[1]
kable(band_defns)
```{r, echo = F}
band_defns <- tribble(
~definition, ~color, ~min, ~max,
"ITEX", "red", 560, 600,
"ITEX", "nir", 725, 1000,
"MODIS", "red", 620, 670,
"MODIS", "nir", 841, 876,
"MODIS", "blue", 459,479,
"SKYE", "red", 620, 680,
"SKYE", "nir", 830, 880,
"SKYE", "blue", 455, 480,
"Greenseeker", "red", 656, 656,
"Greenseeker", "nir", 774, 774,
"RapidSCAN", "red", 670, 670,
"RapidSCAN", "nir", 780, 780,
"RapidSCAN", "red_edge", 730, 730,
"ToolikGIS_Drone_2018", "red", 640, 680,
"ToolikGIS_Drone_2018", "nir", 820, 890,
"ToolikGIS_MicaSense_2019", "blue", 455, 495,
"ToolikGIS_MicaSense_2019", "green", 540, 580,
"ToolikGIS_MicaSense_2019", "red", 658, 678,
"ToolikGIS_MicaSense_2019", "red_edge", 707, 727,
"ToolikGIS_MicaSense_2019", "nir", 800, 880,
"ToolikEDC", "red", 560, 680,
"ToolikEDC", "nir", 725, 1000
)
band_defns <- tribble(
~definition, ~color, ~min, ~max,
"ITEX", "red", 560, 600,
"ITEX", "nir", 725, 1000,
"MODIS", "red", 620, 670,
"MODIS", "nir", 841, 876,
"MODIS", "blue", 459,479,
"SKYE", "red", 620, 680,
"SKYE", "nir", 830, 880,
"SKYE", "blue", 455, 480,
"Greenseeker", "red", 656, 656,
"Greenseeker", "nir", 774, 774,
"RapidSCAN", "red", 670, 670,
"RapidSCAN", "nir", 780, 780,
"RapidSCAN", "red_edge", 730, 730,
"ToolikGIS_Drone_2018", "red", 640, 680,
"ToolikGIS_Drone_2018", "nir", 820, 890,
"ToolikGIS_MicaSense_2019", "blue", 455, 495,
"ToolikGIS_MicaSense_2019", "green", 540, 580,
"ToolikGIS_MicaSense_2019", "red", 658, 678,
"ToolikGIS_MicaSense_2019", "red_edge", 707, 727,
"ToolikGIS_MicaSense_2019", "nir", 800, 880,
"ToolikEDC", "red", 560, 680,
"ToolikEDC", "nir", 725, 1000
)
kable(band_defns)
index_check <- data_check_1 %>%
mutate(NDVI = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = "MODIS", indices = "NDVI")))
index_data <- corrected_data %>%
mutate(NDVI = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = c("MODIS", "Greenseeker", "RapidSCAN"), indices = "NDVI")))
index_data <- corrected_data %>%
mutate(NDVI = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = c("MODIS"), indices = "NDVI")))
index_data
index_data$NDVI
calculate_indices <- function(spectra, band_defns, instrument = "MODIS", indices = "NDVI") {
# Calculates NDVI, EVI, and EVI2 from dataframe including Wavelength : Spectra
## inputs: spectra - Wavelength, Reflectance columns
##         band_defns : wavelengths definining colors
##         instrument : e.g. MODIS, SKYE, ITEX
##         indicies   : the index to return
## output: dataframe with Index : Value
bands <- band_defns %>%
filter(definition == instrument)
blue <- bands %>% filter(color=="blue") %>% select(min, max) %>% as.numeric()
nir <- bands %>% filter(color=="nir") %>% select(min, max) %>% as.numeric()
red <- bands %>% filter(color=="red") %>% select(min, max) %>% as.numeric()
spectra_bands <- spectra %>%
mutate(color = ifelse(Wavelength >= blue[1] & Wavelength <= blue[2], "blue",
ifelse(Wavelength >= red[1] & Wavelength <= red[2], "red",
ifelse(Wavelength >= nir[1] & Wavelength <= nir[2], "nir",
"other")))) %>%
group_by(color) %>%
summarize(Reflectance = mean(Reflectance))
index_data <- spectra_bands %>%
spread(color, Reflectance) %>%
mutate(NDVI = (nir-red)/(nir+red),
EVI = 2.5*((nir-red)/(nir+6*red-7.5*blue + 1)),
EVI2 = 2.5*((nir-red)/(nir+2.4*red + 1))) %>%
select_at(indices) %>%
gather(Index, Value, everything())
return(index_data)
}
index_data <- corrected_data %>%
mutate(NDVI = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = c("MODIS", "Greenseeker", "RapidSCAN"), indices = "NDVI")))
calculate_indices <- function(spectra, band_defns, instrument = "MODIS", indices = "NDVI") {
# Calculates NDVI, EVI, and EVI2 from dataframe including Wavelength : Spectra
## inputs: spectra - Wavelength, Reflectance columns
##         band_defns : wavelengths definining colors
##         instrument : e.g. MODIS, SKYE, ITEX
##         indicies   : the index to return
## output: dataframe with Index : Value
bands <- band_defns %>%
filter(definition %in% instrument)
blue <- bands %>% filter(color=="blue") %>% select(min, max) %>% as.numeric()
nir <- bands %>% filter(color=="nir") %>% select(min, max) %>% as.numeric()
red <- bands %>% filter(color=="red") %>% select(min, max) %>% as.numeric()
spectra_bands <- spectra %>%
mutate(color = ifelse(Wavelength >= blue[1] & Wavelength <= blue[2], "blue",
ifelse(Wavelength >= red[1] & Wavelength <= red[2], "red",
ifelse(Wavelength >= nir[1] & Wavelength <= nir[2], "nir",
"other")))) %>%
group_by(color) %>%
summarize(Reflectance = mean(Reflectance))
index_data <- spectra_bands %>%
spread(color, Reflectance) %>%
mutate(NDVI = (nir-red)/(nir+red),
EVI = 2.5*((nir-red)/(nir+6*red-7.5*blue + 1)),
EVI2 = 2.5*((nir-red)/(nir+2.4*red + 1))) %>%
select_at(indices) %>%
gather(Index, Value, everything())
return(index_data)
}
index_data <- corrected_data %>%
mutate(NDVI = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = c("MODIS", "Greenseeker", "RapidSCAN"), indices = "NDVI")))
bands <- band_defns %>%
filter(definition %in% instrument)
instrument = c("MODIS", "Greenseeker", "RapidSCAN")
bands <- band_defns %>%
filter(definition %in% instrument)
blue <- bands %>% filter(color=="blue") %>% select(min, max) %>% as.numeric()
nir <- bands %>% filter(color=="nir") %>% select(min, max) %>% as.numeric()
blue
bands
calculate_spectral_bands <- function(spectra, band_defns, instruments) {
# Calculates spectral bands from dataframe including Wavelength & Reflectance
## inputs: spectra - Wavelength, Reflectance columns
##         band_defns : wavelengths definining colors
##         instrument : e.g. MODIS, SKYE, ITEX
##         bands   : the spectral bands to return, e.g. red, blue, nir, etc.
## output: spectra_bands = dataframe with Definition, Band, Averaged Reflectance
bands <- band_defns %>%
filter(definition %in% instruments)
# vector of wavelengths, one set per instrument
wavelengths <- seq(300, 1500, by = 1)
# dataframe of wavelengths labeled by instrument & color
bands_df <- tibble(Wavelength = rep(wavelengths, times = length(instruments)),
definition = rep(instruments, each = length(wavelengths))) %>%
full_join(bands) %>%
mutate(color_match = ifelse(Wavelength >= min & Wavelength <= max, color, NA)) %>%
select(Wavelength, definition, color_match) %>%
distinct()
## DATA: join to measured spectra
spectra_bands <- full_join(spectra, bands_df) %>%
group_by(definition, color_match) %>%
summarize(average_reflectance = mean(Reflectance)) %>%
filter(!is.na(color_match)) %>%
rename(band = color_match)
return(spectra_bands)
}
band_data <- corrected_data %>%
mutate(NDVI = map(Spectra, function(x) calculate_spectral_bands(x, band_defns = band_defns, instrument = c("MODIS", "Greenseeker", "RapidSCAN"), indices = "NDVI")))
band_data <- corrected_data %>%
mutate(NDVI = map(Spectra, function(x) calculate_spectral_bands(x, band_defns = band_defns, instrument = c("MODIS", "Greenseeker", "RapidSCAN"))))
band_data
# Calculate Spectral Bands
band_data <- corrected_data %>%
mutate(NDVI = map(Spectra, function(x) calculate_spectral_bands(x, band_defns = band_defns, instrument = c("MODIS", "Greenseeker", "RapidSCAN"))))  %>% rename(Bands = NDVI)
band_data$Bands[1]
bands <- band_defns %>%
filter(definition %in% instruments)
instruments = c("MODIS", "Greenseeker", "RapidSCAN")
bands <- band_defns %>%
filter(definition %in% instruments)
# vector of wavelengths, one set per instrument
wavelengths <- seq(300, 1500, by = 1)
# dataframe of wavelengths labeled by instrument & color
bands_df <- tibble(Wavelength = rep(wavelengths, times = length(instruments)),
definition = rep(instruments, each = length(wavelengths))) %>%
full_join(bands) %>%
mutate(color_match = ifelse(Wavelength >= min & Wavelength <= max, color, NA)) %>%
select(Wavelength, definition, color_match) %>%
distinct()
bands_df
corrected_data$Spectra[[1]]
spectra <- corrected_data$Spectra[[1]]
## DATA: join to measured spectra
spectra_bands <- full_join(spectra, bands_df) %>%
group_by(definition, color_match) %>%
summarize(average_reflectance = mean(Reflectance)) %>%
filter(!is.na(color_match)) %>%
rename(band = color_match)
spectra_bands
bands_df
bands_df %>% summary()
# dataframe of wavelengths labeled by instrument & color
bands_df <- tibble(Wavelength = rep(wavelengths, times = length(instruments)),
definition = rep(instruments, each = length(wavelengths))) %>%
full_join(bands) %>%
mutate(color_match = ifelse(Wavelength >= min & Wavelength <= max, color, NA)) %>%
select(Wavelength, definition, color_match) %>%
distinct()
bands_df %>% names()
bands_df %>% mutate_at(.vars(definition, color_match), .funs = factor)
bands_df %>% mutate_at(.vars = vars(definition, color_match), .funs = factor)
bands_df %>% mutate_at(.vars = vars(definition, color_match), .funs = factor) %>% summary()
interpolated_data <- corrected_data %>% select(spu_filename, Spectra) %>%
mutate(interpolated_spectra = map(Spectra, .f = interpolate_spectra)) # Spectra must have "Reflectance" column
interpolated_data$
interpolated_data
interpolated_data$interpolated_spectra[1]
# Calculate Spectral Bands
band_data <- corrected_data %>%
mutate(Bands = map(interpolated_spectra, function(x) calculate_spectral_bands(x, band_defns = band_defns, instrument = c("MODIS", "Greenseeker", "RapidSCAN"))))
# Apply references to raw spu data ==> Dataframe of corrected spu spectra
corrected_data <- raw_data %>%
filter(!str_detect(Treatment, "REF|DARK")) %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
left_join(ref_summary) %>%
select(Date, DateTime, Site, Block, Treatment, Replicate, spu_filename, FileNum, Integration_ms, Weather, Notes, Notes_REF, ref_filenames, int_REF, Wavelength, ChB, ChA, ChB_REF, ChA_REF, CorrectionFactor) %>%
mutate(raw_reflectance = ChB/ChA) %>% # the raw reflectance
mutate(Reflectance = raw_reflectance*CorrectionFactor) %>%  # the corrected reflectance
nest(Wavelength:Reflectance, .key = Spectra) %>%
# interpolate Specta to 1nm
mutate(interpolated_spectra = map(Spectra, .f = interpolate_spectra)) # Spectra must have "Reflectance" column
# Calculate Spectral Bands
band_data <- corrected_data %>%
mutate(Bands = map(interpolated_spectra, function(x) calculate_spectral_bands(x, band_defns = band_defns, instrument = c("MODIS", "Greenseeker", "RapidSCAN"))))
band_data$Bands[1]
band_data$Bands[30]
write_csv("spectral_instrument_comparison/2019-06-02/2019-06-02_unispec_spectral_bands.rds")
write_rds("spectral_instrument_comparison/2019-06-02/2019-06-02_unispec_spectral_bands.rds")
write_rds(band_data, path = "spectral_instrument_comparison/2019-06-02/2019-06-02_unispec_spectral_bands.rds")
# Calculate Index Data
index_data <- band_data %>% unnest(bands) %>%
spread(key = band, value = average_reflectance)
# Calculate Index Data
index_data <- band_data %>% unnest(bands) %>%
spread(key = bands, value = average_reflectance)
# Calculate Index Data
band_data %>% unnest(bands)
# Calculate Index Data
band_data %>% unnest(Bands) %>%
spread(key = band, value = average_reflectance)
band_data %>% names()
# Calculate Index Data
band_data %>% unnest(Bands) %>%
spread(key = band, value = average_reflectance) %>%
mutate(NDVI = (nir-red)/(nir+red))
# Save NDVI data
write_csv(ndvi_data %>% select(spu_filename, Date, Site, Block, Treatment, Replicate, definition, NDVI))
# Calculate NDVI data
ndvi_data <- band_data %>% unnest(Bands) %>%
spread(key = band, value = average_reflectance) %>%
mutate(NDVI = (nir-red)/(nir+red))
# Save NDVI data
write_csv(ndvi_data %>% select(spu_filename, Date, Site, Block, Treatment, Replicate, definition, NDVI), path = "spectral_instrument_comparison/2019-06-02/2019-06-02_unispec_ndvi.clv")
# Save NDVI data
write_csv(ndvi_data %>% select(spu_filename, Date, Site, Block, Treatment, Replicate, definition, NDVI), path = "spectral_instrument_comparison/2019-06-02/2019-06-02_unispec_ndvi.csv")
ndvi_data
ndvi_data$NDVI[1:10]
names(ndvi_data)
names(scanner_data)
scanner_data
# Calculate NDVI data
ndvi_data <- band_data %>% unnest(Bands) %>%
spread(key = band, value = average_reflectance) %>%
mutate(NDVI = (nir-red)/(nir+red))
ndvi_df <- scanner_data %>% full_join(ndvi_data)
str(ndvi_data)
scanner_data
str(scanner_data)
?gather
ndvi_df <- scanner_data %>%
select(-spu_filenames, Unispec_NDVI) %>%
gather(Rapidscaen, Greenseeker, key = definition, value = NDVI)
ndvi_df <- scanner_data %>%
select(-spu_filenames, Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI)
ndvi_Df
ndvi_df
ndvi_df <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI)
scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI)
ndvi_df <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI) %>%
full_join(ndvi_data)
ndvi_df <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI) %>%
full_join(ndvi_data %>% mutate(Replicate = as.character(Replicate)))
ndvi_Df
ndvi_df
summary(ndvi_df)
ndvi_df <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI) %>%
rbind(ndvi_data %>% mutate(Replicate = as.character(Replicate)))
scanner_data
ndvi_df <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI) %>%
rbind(ndvi_data %>% mutate(Replicate = as.character(Replicate) %>%
select(Date, Site, Block, Treatment, definition, NDVI)))
ndvi_df <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI) %>%
rbind(ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, definition, NDVI)))
ndvi_df <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI) %>%
rbind(ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, definition, NDVI))
ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, definition, NDVI))
ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, definition, NDVI)
ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, Replicate, definition, NDVI)
scanner_data %>%
scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI)
scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI)
ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, Replicate, definition, NDVI, Notes)
scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI)
ndvi_df <- rbind(d1, d2)
d1 <- ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, Replicate, definition, NDVI, Notes)
d2 <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI)
ndvi_df <- rbind(d1, d2)
ndvi_df
d2 <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI) %>%
mutate(instrument = definition)
d1 <- ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, Replicate, definition, NDVI, Notes) %>%
mutate(instrument = "Unispec-DC")
d2 <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
gather(Rapidscan, Greenseeker, key = definition, value = NDVI) %>%
mutate(instrument = definition)
ndvi_df <- rbind(d1, d2)
## PLOT IT
ggplot(ndvi_df, aes(x=definition, y = NDVI)) +
geom_boxplot(aes(fill=instrument)) +
facet_grid(Treatment ~ definition) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
d2 <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
rename(RapidSCAN = Rapidscan)
ndvi_df <- rbind(d1, d2)
## PLOT IT
ggplot(ndvi_df, aes(x=definition, y = NDVI)) +
geom_boxplot(aes(fill=instrument)) +
facet_grid(Treatment ~ definition) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
d2
d2
d2 <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
rename(RapidSCAN = Rapidscan) %>%
gather(RapidSCAN, Greenseeker, key = definition, value = NDVI) %>%
mutate(instrument = definition)
ndvi_df <- rbind(d1, d2)
d1 <- ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, Replicate, definition, NDVI, Notes) %>%
mutate(instrument = "Unispec-DC")
d2 <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
rename(RapidSCAN = Rapidscan) %>%
gather(RapidSCAN, Greenseeker, key = definition, value = NDVI) %>%
mutate(instrument = definition)
ndvi_df <- rbind(d1, d2)
## PLOT IT
ggplot(ndvi_df, aes(x=definition, y = NDVI)) +
geom_boxplot(aes(fill=instrument)) +
facet_grid(Treatment ~ definition) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
## PLOT IT
ggplot(ndvi_df, aes(x=Treatment, y = NDVI)) +
geom_boxplot(aes(fill=instrument)) +
facet_grid(. ~ definition) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
## PLOT IT
ggplot(ndvi_df, aes(x=Treatment, y = NDVI)) +
geom_boxplot(aes(fill=instrument)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
d1 <- ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, Replicate, definition, NDVI, Notes) %>%
mutate(instrument = "Unispec-DC") %>%
select(definition = "RapidSCAN")
d2 <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
rename(RapidSCAN = Rapidscan) %>%
gather(RapidSCAN, Greenseeker, key = definition, value = NDVI) %>%
mutate(instrument = definition)
ndvi_df <- rbind(d1, d2)
## PLOT IT
ggplot(ndvi_df, aes(x=Treatment, y = NDVI)) +
geom_boxplot(aes(fill=instrument)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
d1 <- ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, Replicate, definition, NDVI, Notes) %>%
mutate(instrument = "Unispec-DC") %>%
filter(definition = "RapidSCAN")
d2 <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
rename(RapidSCAN = Rapidscan) %>%
gather(RapidSCAN, Greenseeker, key = definition, value = NDVI) %>%
mutate(instrument = definition)
ndvi_df <- rbind(d1, d2)
## PLOT IT
ggplot(ndvi_df, aes(x=Treatment, y = NDVI)) +
geom_boxplot(aes(fill=instrument)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
d2 <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
rename(RapidSCAN = Rapidscan) %>%
gather(RapidSCAN, Greenseeker, key = definition, value = NDVI) %>%
mutate(instrument = definition) %>%
filter(definition = RapidSCAN)
ndvi_df <- rbind(d1, d2)
## PLOT IT
ggplot(ndvi_df, aes(x=Treatment, y = NDVI)) +
geom_boxplot(aes(fill=instrument)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
d1 <- ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, Replicate, definition, NDVI, Notes) %>%
mutate(instrument = "Unispec-DC") %>%
filter(definition == "RapidSCAN")
d2 <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
rename(RapidSCAN = Rapidscan) %>%
gather(RapidSCAN, Greenseeker, key = definition, value = NDVI) %>%
mutate(instrument = definition) %>%
filter(definition == RapidSCAN)
ndvi_df <- rbind(d1, d2)
d1 <- ndvi_data %>% mutate(Replicate = as.character(Replicate)) %>%
select(Date, Site, Block, Treatment, Replicate, definition, NDVI, Notes) %>%
mutate(instrument = "Unispec-DC") %>%
filter(definition == "RapidSCAN")
d2 <- scanner_data %>%
select(-spu_filenames, -Unispec_NDVI) %>%
rename(RapidSCAN = Rapidscan) %>%
gather(RapidSCAN, Greenseeker, key = definition, value = NDVI) %>%
mutate(instrument = definition) %>%
filter(definition == "RapidSCAN")
ndvi_df <- rbind(d1, d2)
## PLOT IT
ggplot(ndvi_df, aes(x=Treatment, y = NDVI)) +
geom_boxplot(aes(fill=instrument)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
write_csv(scanner_data, "spectral_instrument_comparison/2019-06-02/2019-06-02_scanner_ndvi.csv")
?right_join
load(tidyverse)
require(tidyverse)
?right_join
?setdiff
