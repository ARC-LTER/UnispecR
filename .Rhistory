# Examine dataframe
time_check %>% select(Date, Site, Block, Treatment, Location,FileNum, diff, Integration) %>% print(n=200)
options(knitr.kable.NA = '')
## Build REF key
ref_keys <- field_keys %>%
filter(Treatment == "REF") %>% # extract reference data
## The following separates the Site column into "Site" and "Site_REF"
### Site = the site to which the reference measurements should be applied
### Site_REF = the site where the reference measurements were actually collected
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
mutate(Site_REF = coalesce(Site_REF, Site)) # if the references were collected at 'Site', the created column Site_REF will be NA. Use coalesce() to fill these NA's with the value of "Site".
### spu data for references
spu_for_ref <- spu_dataframe %>% # in "spu_dataframe", the "Site" column is the location where the data was collected
rename(Site_REF = Site) # we thus rename Site to Site_REF to match the column 'ref_keys'
## Join spu data to ref_keys by Site_REF, Date, FileNum
ref_data <- ref_keys  %>%
left_join(spu_for_ref)  ## "Site_REF" is the location where the file (from which the reference correction factor is calculated) actually was collected
## "Site", inherited from ref_keys, is now the location where the correction factor should be applied
## Table per Site of Reference Files
ref_filenames_table <- ref_data %>% group_by(Date, Site, Site_REF) %>%
summarize(Files = n_distinct(spu_filename), ref_filenames = str_c(spu_filename,collapse = ", "))
## Table per Site for all files
df_ref_table <- df %>%
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
filter(!is.na(Treatment)) %>%
group_by(Date, Site) %>%
summarize(Treatments = str_c(unique(Treatment), collapse = ","), Files = n_distinct(spu_filename))
## Output
ref_filenames_table
ref_data %>% filter(Spectra %>% map(is.null) %>% map_lgl(any)) %>% select(Date, Site, Block) %>% unique()
## Build Plot all reference data files
ref_data_all <- ref_data %>% unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(CorrectionFactor = ChA/ChB)
(ref_plot_all <- ggplot(ref_data_all, aes(x = Wavelength, y = CorrectionFactor, group=spu_filename)) +
theme(legend.position="left") +
geom_line(aes(color=factor(Integration))))
## Build Plot all reference mistakes
ref_data_mistakes <- ref_data_all %>%
filter(CorrectionFactor > 5) %>%
distinct(spu_filename) %>%
select(spu_filename) %>%
left_join(ref_data_all)
(ref_plot_mistakes <- ggplot(ref_data_mistakes, aes(x = Wavelength, y = CorrectionFactor)) +
geom_line(aes(color=spu_filename)))
## PLOTS
ref_plot_all + ggtitle("ALL REFERENCES")
# ref_plot_mistakes + ggtitle("REF Mistakes") +
#   scale_y_continuous(limits = c(0, NA))
## File Lists
ref_files <- ref_data$spu_filename %>% unique()
ref_mistakes <- ref_data_mistakes %>% distinct(spu_filename) %>% pull()
(ref_plot_mistakes <- ggplot(ref_data_mistakes, aes(x = Wavelength, y = CorrectionFactor)) +
geom_line(aes(color=spu_filename)))
# Find files
key_files <- list.files(path=data_path, pattern="*key.csv", full.names=TRUE)
field_keys <- key_files %>%  purrr::map(function(file_name) read_csv(file_name)) %>%
reduce(rbind) %>%
mutate(Date = date(params$session_date)) # Add date
# Confirm spu_dataframe has same Site abbreviation as key
if(!(unique(spu_dataframe$Site) %in% unique(field_keys$Site) %>% all())) {
print("SITE NAME in spu_files and spu_fieldkey differ! Check file names and file key template.")
}
# Date inconsistencies
if(spu_dataframe %>% pull(Date) %>% unique() != params$session_date){
print("Date Discrepancy")
}
# Join by SITE, DATE, FILENUM
df <- left_join(spu_dataframe, field_keys) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
options(knitr.kable.NA = '')
## Build REF key
ref_keys <- field_keys %>%
filter(Treatment == "REF") %>% # extract reference data
## The following separates the Site column into "Site" and "Site_REF"
### Site = the site to which the reference measurements should be applied
### Site_REF = the site where the reference measurements were actually collected
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
mutate(Site_REF = coalesce(Site_REF, Site)) # if the references were collected at 'Site', the created column Site_REF will be NA. Use coalesce() to fill these NA's with the value of "Site".
### spu data for references
spu_for_ref <- spu_dataframe %>% # in "spu_dataframe", the "Site" column is the location where the data was collected
rename(Site_REF = Site) # we thus rename Site to Site_REF to match the column 'ref_keys'
## Join spu data to ref_keys by Site_REF, Date, FileNum
ref_data <- ref_keys  %>%
left_join(spu_for_ref)  ## "Site_REF" is the location where the file (from which the reference correction factor is calculated) actually was collected
## "Site", inherited from ref_keys, is now the location where the correction factor should be applied
## Table per Site of Reference Files
ref_filenames_table <- ref_data %>% group_by(Date, Site, Site_REF) %>%
summarize(Files = n_distinct(spu_filename), ref_filenames = str_c(spu_filename,collapse = ", "))
## Table per Site for all files
df_ref_table <- df %>%
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
filter(!is.na(Treatment)) %>%
group_by(Date, Site) %>%
summarize(Treatments = str_c(unique(Treatment), collapse = ","), Files = n_distinct(spu_filename))
## Output
ref_filenames_table
options(knitr.kable.NA = '')
## Build REF key
ref_keys <- field_keys %>%
filter(Treatment == "REF") %>% # extract reference data
## The following separates the Site column into "Site" and "Site_REF"
### Site = the site to which the reference measurements should be applied
### Site_REF = the site where the reference measurements were actually collected
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
mutate(Site_REF = coalesce(Site_REF, Site)) # if the references were collected at 'Site', the created column Site_REF will be NA. Use coalesce() to fill these NA's with the value of "Site".
### spu data for references
spu_for_ref <- spu_dataframe %>% # in "spu_dataframe", the "Site" column is the location where the data was collected
rename(Site_REF = Site) # we thus rename Site to Site_REF to match the column 'ref_keys'
## Join spu data to ref_keys by Site_REF, Date, FileNum
ref_data <- ref_keys  %>%
left_join(spu_for_ref)  ## "Site_REF" is the location where the file (from which the reference correction factor is calculated) actually was collected
## "Site", inherited from ref_keys, is now the location where the correction factor should be applied
## Table per Site of Reference Files
ref_filenames_table <- ref_data %>% group_by(Date, Site, Site_REF) %>%
summarize(Files = n_distinct(spu_filename), ref_filenames = str_c(spu_filename,collapse = ", "))
## Table per Site for all files
df_ref_table <- df %>%
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
filter(!is.na(Treatment)) %>%
group_by(Date, Site) %>%
summarize(Treatments = str_c(unique(Treatment), collapse = ","), Files = n_distinct(spu_filename))
## Output
ref_filenames_table
ref_data %>% filter(Spectra %>% map(is.null) %>% map_lgl(any)) %>% select(Date, Site, Block) %>% unique()
## Build Plot all reference data files
ref_data_all <- ref_data %>% unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(CorrectionFactor = ChA/ChB)
(ref_plot_all <- ggplot(ref_data_all, aes(x = Wavelength, y = CorrectionFactor, group=spu_filename)) +
theme(legend.position="left") +
geom_line(aes(color=factor(Integration))))
## Build Plot all reference mistakes
ref_data_mistakes <- ref_data_all %>%
filter(CorrectionFactor > 5) %>%
distinct(spu_filename) %>%
select(spu_filename) %>%
left_join(ref_data_all)
(ref_plot_mistakes <- ggplot(ref_data_mistakes, aes(x = Wavelength, y = CorrectionFactor)) +
geom_line(aes(color=spu_filename)))
## PLOTS
ref_plot_all + ggtitle("ALL REFERENCES")
# ref_plot_mistakes + ggtitle("REF Mistakes") +
#   scale_y_continuous(limits = c(0, NA))
## File Lists
ref_files <- ref_data$spu_filename %>% unique()
ref_mistakes <- ref_data_mistakes %>% distinct(spu_filename) %>% pull()
ref_files
ref_data_all
ref_data
ref_data %>% filter(ScanType =="DARKscan")
# Find files
key_files <- list.files(path=data_path, pattern="*key.csv", full.names=TRUE)
field_keys <- key_files %>%  purrr::map(function(file_name) read_csv(file_name)) %>%
reduce(rbind) %>%
mutate(Date = date(params$session_date)) # Add date
# Confirm spu_dataframe has same Site abbreviation as key
if(!(unique(spu_dataframe$Site) %in% unique(field_keys$Site) %>% all())) {
print("SITE NAME in spu_files and spu_fieldkey differ! Check file names and file key template.")
}
# Date inconsistencies
if(spu_dataframe %>% pull(Date) %>% unique() != params$session_date){
print("Date Discrepancy")
}
# Join by SITE, DATE, FILENUM
df <- left_join(spu_dataframe, field_keys) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
options(knitr.kable.NA = '')
## Build REF key
ref_keys <- field_keys %>%
filter(Treatment == "REF") %>% # extract reference data
## The following separates the Site column into "Site" and "Site_REF"
### Site = the site to which the reference measurements should be applied
### Site_REF = the site where the reference measurements were actually collected
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
mutate(Site_REF = coalesce(Site_REF, Site)) # if the references were collected at 'Site', the created column Site_REF will be NA. Use coalesce() to fill these NA's with the value of "Site".
### spu data for references
spu_for_ref <- spu_dataframe %>% # in "spu_dataframe", the "Site" column is the location where the data was collected
rename(Site_REF = Site) # we thus rename Site to Site_REF to match the column 'ref_keys'
## Join spu data to ref_keys by Site_REF, Date, FileNum
ref_data <- ref_keys  %>%
left_join(spu_for_ref)  ## "Site_REF" is the location where the file (from which the reference correction factor is calculated) actually was collected
## "Site", inherited from ref_keys, is now the location where the correction factor should be applied
## Table per Site of Reference Files
ref_filenames_table <- ref_data %>% group_by(Date, Site, Site_REF) %>%
summarize(Files = n_distinct(spu_filename), ref_filenames = str_c(spu_filename,collapse = ", "))
## Table per Site for all files
df_ref_table <- df %>%
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
filter(!is.na(Treatment)) %>%
group_by(Date, Site) %>%
summarize(Treatments = str_c(unique(Treatment), collapse = ","), Files = n_distinct(spu_filename))
## Output
ref_filenames_table
ref_data %>% filter(Spectra %>% map(is.null) %>% map_lgl(any)) %>% select(Date, Site, Block) %>% unique()
## Build Plot all reference data files
ref_data_all <- ref_data %>% unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(CorrectionFactor = ChA/ChB)
(ref_plot_all <- ggplot(ref_data_all, aes(x = Wavelength, y = CorrectionFactor, group=spu_filename)) +
theme(legend.position="left") +
geom_line(aes(color=factor(Integration))))
## Build Plot all reference mistakes
ref_data_mistakes <- ref_data_all %>%
filter(CorrectionFactor > 5) %>%
distinct(spu_filename) %>%
select(spu_filename) %>%
left_join(ref_data_all)
(ref_plot_mistakes <- ggplot(ref_data_mistakes, aes(x = Wavelength, y = CorrectionFactor)) +
geom_line(aes(color=spu_filename)))
## PLOTS
ref_plot_all + ggtitle("ALL REFERENCES")
# ref_plot_mistakes + ggtitle("REF Mistakes") +
#   scale_y_continuous(limits = c(0, NA))
## File Lists
ref_files <- ref_data$spu_filename %>% unique()
ref_mistakes <- ref_data_mistakes %>% distinct(spu_filename) %>% pull()
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
## The following steps expand the "Block" column to create one REF set per Block per Site. This structure is necessary for situtations where different refs are used for different blocks at the same site.
separate(Block, into = c("BX1", "BX2", "BX3", "BX4"), sep = ",") %>% #1: expand string entry in "Block" into separate columns -- NOTE: this step throws a "Warning: Expected 4 pieces." for sites w/less than 4 blocks
gather(Block, BlockString, BX1:BX4) %>% #2: re-condense into one column, generates correct number of rows per site AND per block
mutate(Block = str_squish(BlockString), BlockString=NULL) %>% #3: replace placeholder column names w/"B1-B4". Also removes whitespace from BlockString contents introduced by "separate" function
filter(!is.na(Block)) %>% #4: remove empty rows for sites w/out B3 or B4
### Unnest Spectra & calculate
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(CorrectionFactor = ChA/ChB) %>%
### The following code group repeated REF measurements, and takes the mean
group_by(Date,Site,Block,Integration, Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, Integration_ms) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor = mean(ChA/ChB), Notes_REF = str_c(Notes, collapse = "; "), ref_filenames = str_c(spu_filename,collapse = ", "))
## Join DATA with REFS
### Check no missing Spectra
spu_dataframe %>% filter(Spectra %>% map(is.null) %>% map_lgl(any))
spu_for_plots <- df %>% filter(!str_detect(Treatment, "REF|DARK")) %>% filter(!is.na(DateTime)) %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
df_ref <- left_join(spu_for_plots, ref_summary) %>%
mutate(raw_reflectance = ChB/ChA) %>% # the raw reflectance
mutate(corrected_reflectance = raw_reflectance*CorrectionFactor)
## Corrected Reflectances
df_corrected <- df_ref %>%
nest(processed_spectra = c(Wavelength, ChB, ChA, ChB_REF, ChA_REF, CorrectionFactor, raw_reflectance, corrected_reflectance))
## Check all files have a corrected reflectance
corrected_spectra_files <- df_corrected %>% unnest(processed_spectra) %>% filter(!is.na(corrected_reflectance)) %>% select(spu_filename, Date, Site) %>% distinct()
## missing corrections
anti_join(df_corrected, corrected_spectra_files) %>%
group_by(Date, Site, Block, Treatment, Integration) %>%
summarize(Num_Files = n()) %>% kable()
## Check that no important treatments are left out
anti_join(df, df_corrected, by = "spu_filename") %>% pull(Treatment) %>% unique()
# Find files
key_files <- list.files(path=data_path, pattern="*key.csv", full.names=TRUE)
field_keys <- key_files %>%  purrr::map(function(file_name) read_csv(file_name)) %>%
reduce(rbind) %>%
mutate(Date = date(params$session_date)) # Add date
# Confirm spu_dataframe has same Site abbreviation as key
if(!(unique(spu_dataframe$Site) %in% unique(field_keys$Site) %>% all())) {
print("SITE NAME in spu_files and spu_fieldkey differ! Check file names and file key template.")
}
# Date inconsistencies
if(spu_dataframe %>% pull(Date) %>% unique() != params$session_date){
print("Date Discrepancy")
}
# Join by SITE, DATE, FILENUM
df <- left_join(spu_dataframe, field_keys) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
# Find files
key_files <- list.files(path=data_path, pattern="*key.csv", full.names=TRUE)
field_keys <- key_files %>%  purrr::map(function(file_name) read_csv(file_name)) %>%
reduce(rbind) %>%
mutate(Date = date(params$session_date)) # Add date
# Confirm spu_dataframe has same Site abbreviation as key
if(!(unique(spu_dataframe$Site) %in% unique(field_keys$Site) %>% all())) {
print("SITE NAME in spu_files and spu_fieldkey differ! Check file names and file key template.")
}
# Date inconsistencies
if(spu_dataframe %>% pull(Date) %>% unique() != params$session_date){
print("Date Discrepancy")
}
# Join by SITE, DATE, FILENUM
df <- left_join(spu_dataframe, field_keys) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
options(knitr.kable.NA = '')
## Build REF key
ref_keys <- field_keys %>%
filter(Treatment == "REF") %>% # extract reference data
## The following separates the Site column into "Site" and "Site_REF"
### Site = the site to which the reference measurements should be applied
### Site_REF = the site where the reference measurements were actually collected
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
mutate(Site_REF = coalesce(Site_REF, Site)) # if the references were collected at 'Site', the created column Site_REF will be NA. Use coalesce() to fill these NA's with the value of "Site".
### spu data for references
spu_for_ref <- spu_dataframe %>% # in "spu_dataframe", the "Site" column is the location where the data was collected
rename(Site_REF = Site) # we thus rename Site to Site_REF to match the column 'ref_keys'
## Join spu data to ref_keys by Site_REF, Date, FileNum
ref_data <- ref_keys  %>%
left_join(spu_for_ref)  ## "Site_REF" is the location where the file (from which the reference correction factor is calculated) actually was collected
## "Site", inherited from ref_keys, is now the location where the correction factor should be applied
## Table per Site of Reference Files
ref_filenames_table <- ref_data %>% group_by(Date, Site, Site_REF) %>%
summarize(Files = n_distinct(spu_filename), ref_filenames = str_c(spu_filename,collapse = ", "))
## Table per Site for all files
df_ref_table <- df %>%
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
filter(!is.na(Treatment)) %>%
group_by(Date, Site) %>%
summarize(Treatments = str_c(unique(Treatment), collapse = ","), Files = n_distinct(spu_filename))
## Output
ref_filenames_table
ref_data %>% filter(Spectra %>% map(is.null) %>% map_lgl(any)) %>% select(Date, Site, Block) %>% unique()
## Build Plot all reference data files
ref_data_all <- ref_data %>% unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(CorrectionFactor = ChA/ChB)
(ref_plot_all <- ggplot(ref_data_all, aes(x = Wavelength, y = CorrectionFactor, group=spu_filename)) +
theme(legend.position="left") +
geom_line(aes(color=factor(Integration))))
## Build Plot all reference mistakes
ref_data_mistakes <- ref_data_all %>%
filter(CorrectionFactor > 5) %>%
distinct(spu_filename) %>%
select(spu_filename) %>%
left_join(ref_data_all)
(ref_plot_mistakes <- ggplot(ref_data_mistakes, aes(x = Wavelength, y = CorrectionFactor)) +
geom_line(aes(color=spu_filename)))
## PLOTS
ref_plot_all + ggtitle("ALL REFERENCES")
# ref_plot_mistakes + ggtitle("REF Mistakes") +
#   scale_y_continuous(limits = c(0, NA))
## File Lists
ref_files <- ref_data$spu_filename %>% unique()
ref_mistakes <- ref_data_mistakes %>% distinct(spu_filename) %>% pull()
## Average 5 chosen ref measurements per DATE/SITE/BLOCK
ref_summary <- ref_data %>%
## The following steps expand the "Block" column to create one REF set per Block per Site. This structure is necessary for situtations where different refs are used for different blocks at the same site.
separate(Block, into = c("BX1", "BX2", "BX3", "BX4"), sep = ",") %>% #1: expand string entry in "Block" into separate columns -- NOTE: this step throws a "Warning: Expected 4 pieces." for sites w/less than 4 blocks
gather(Block, BlockString, BX1:BX4) %>% #2: re-condense into one column, generates correct number of rows per site AND per block
mutate(Block = str_squish(BlockString), BlockString=NULL) %>% #3: replace placeholder column names w/"B1-B4". Also removes whitespace from BlockString contents introduced by "separate" function
filter(!is.na(Block)) %>% #4: remove empty rows for sites w/out B3 or B4
### Unnest Spectra & calculate
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(CorrectionFactor = ChA/ChB) %>%
### The following code group repeated REF measurements, and takes the mean
group_by(Date,Site,Block,Integration, Wavelength) %>%
# group_by(Date,Site,Block,Wavelength, Integration_ms) %>% # to separate integration times
summarize(ChA_REF = mean(ChA), ChB_REF = mean(ChB), CorrectionFactor = mean(ChA/ChB), Notes_REF = str_c(Notes, collapse = "; "), ref_filenames = str_c(spu_filename,collapse = ", "))
## Join DATA with REFS
### Check no missing Spectra
spu_dataframe %>% filter(Spectra %>% map(is.null) %>% map_lgl(any))
spu_for_plots <- df %>% filter(!str_detect(Treatment, "REF|DARK")) %>% filter(!is.na(DateTime)) %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
df_ref <- left_join(spu_for_plots, ref_summary) %>%
mutate(raw_reflectance = ChB/ChA) %>% # the raw reflectance
mutate(corrected_reflectance = raw_reflectance*CorrectionFactor)
## Corrected Reflectances
df_corrected <- df_ref %>%
nest(processed_spectra = c(Wavelength, ChB, ChA, ChB_REF, ChA_REF, CorrectionFactor, raw_reflectance, corrected_reflectance))
## Check all files have a corrected reflectance
corrected_spectra_files <- df_corrected %>% unnest(processed_spectra) %>% filter(!is.na(corrected_reflectance)) %>% select(spu_filename, Date, Site) %>% distinct()
## missing corrections
anti_join(df_corrected, corrected_spectra_files) %>%
group_by(Date, Site, Block, Treatment, Integration) %>%
summarize(Num_Files = n()) %>% kable()
## Check that no important treatments are left out
anti_join(df, df_corrected, by = "spu_filename") %>% pull(Treatment) %>% unique()
## Corrected Spectra
absurd_data <- df_corrected %>%
filter(!str_detect(Treatment, "REF")) %>% # ignore REF files
unnest(processed_spectra) %>% # use corrected spectra
select(-(ChB:raw_reflectance)) %>%  # remove unnecessary Wavelength specific rows
filter(Wavelength > 400 & Wavelength < 1000) %>%
filter(corrected_reflectance > 1) %>%
nest(Spectra = c(Wavelength, corrected_reflectance))
## File List
absurd_files <- absurd_data$spu_filename
absurd_data
(df_corrected %>%
slice(1:10) %>%
unnest(processed_spectra) %>%
gather(key = Status, value = Reflectance, raw_reflectance, corrected_reflectance) %>%
# VIZ
ggplot(mapping = aes(x = Wavelength, y = Reflectance )) +
geom_line(aes(color = spu_filename, linetype = Status)) +
facet_wrap(vars(Date, Site, Block, Treatment, FileNum)))
(unprocessed_files <- anti_join(spu_dataframe, field_keys) %>% pull(spu_filename))
### MISSING: Find all processed data that is missing corresponding raw spu files
missing_spu_data <- anti_join(field_keys, spu_dataframe)
if(nrow(missing_spu_data) > 0){
missing_spu_data
}
(unprocessed_files <- anti_join(spu_dataframe, field_keys) %>% pull(spu_filename))
## General NA test
df_na <- df %>% filter(ScanType == "Datascan") %>%
filter(is.na(spu_filename) | # spu_filename
is.na(Site) | # site
is.na(Block) & !str_detect(Treatment, "REF|DARK|VEG") | # Block NA's should always be REFS or EXTRA
is.na(Replicate) & !str_detect(Treatment, "REF"), # Check for replicate NA's that aren't REF
Treatment != "EXTRA|VEG|REF") # don't care about EXTRA
## Check for large filenumbers : Inconsistent File Number reading due to number at end of site names
df_lgfn <- df %>%
filter(FileNum > 600) %>%  # Sites w/numbers at the end mis-read in as part of file number. All > 100000: Unispec-DC measurements only go up to 5 digits.
select(Date, Site, Block, Treatment, FileNum, spu_filename)
## Check File Number Pattern -- pulls out treatments that are not multiples of 5
#### Num Files per block should be multiples of 5, unless REF or NA
df_filenum_count <- field_keys %>% group_by(Site, Date, Block) %>%
filter(Treatment != "THROWAWAY") %>%
filter(Treatment != "DARK") %>%
filter(Treatment != "REF") %>%
summarize(Treatments = str_c(str_replace_na(unique(Treatment)), collapse = ","), Num_Files = n()) %>%
filter(Num_Files %% 5 != 0)  # files per plot
### Check for duplicate entries in key
duplicate_entries <- field_keys %>% group_by(Date, Site, Block, Treatment, Replicate, FileNum) %>%
filter(n()>1) %>%
arrange(Date, Site, FileNum)
if(nrow(duplicate_entries)>0) {
duplicate_entries %>% kable()
}
### Check raw spu_files have no duplicates
duplicates <- spu_dataframe %>% group_by(DateTime, FileNum) %>%
filter(n()>1) %>%
arrange(Date, Site, FileNum)
## File List
duplicate_files <- duplicates$spu_filename
if (nrow(spu_dataframe) != length(unique(spu_dataframe$DateTime))) {
## Check for duplicate spu files
duplicates %>%   kable()
}
## Data summary
spu_dataframe %>%
mutate(Date = floor_date(DateTime, unit="day")) %>%
group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable(caption = "Raw .spu files read-into spu_dataframe")
## Print Summary of files
df %>% group_by(Date, Site, Block) %>%
filter(!is.na(Treatment)) %>%
summarize(Treatments = str_c(str_replace_na(sort(unique(Treatment))), collapse = ","), Num_Files = n()) %>%
kable(caption ="Files listed in field key")
## Build REF key
ref_keys <- field_keys %>%
filter(Treatment == "REF") %>% # extract reference data
## The following separates the Site column into "Site" and "Site_REF"
### Site = the site to which the reference measurements should be applied
### Site_REF = the site where the reference measurements were actually collected
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
mutate(Site_REF = coalesce(Site_REF, Site)) # if the references were collected at 'Site', the created column Site_REF will be NA. Use coalesce() to fill these NA's with the value of "Site".
ref_keys
spu_for_ref
## Join spu data to ref_keys by Site_REF, Date, FileNum
ref_data <- ref_keys  %>%
left_join(spu_for_ref)  ## "Site_REF" is the location where the file (from which the reference correction factor is calculated) actually was collected
## Table per Site of Reference Files
ref_filenames_table <- ref_data %>% group_by(Date, Site, Site_REF) %>%
summarize(Files = n_distinct(spu_filename), ref_filenames = str_c(spu_filename,collapse = ", "))
## Table per Site for all files
df_ref_table <- df %>%
separate(Site, into=c("Site", "Site_REF"), sep = "_", fill="right") %>%
filter(!is.na(Treatment)) %>%
group_by(Date, Site) %>%
summarize(Treatments = str_c(unique(Treatment), collapse = ","), Files = n_distinct(spu_filename))
## Output
ref_filenames_table
df_ref_table
df %>%
# select subset
filter(Site == "MNT97") %>%
# arrange for
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(Reflectance = ChB/ChA) %>%
gather(key = Channel, value = Intensity, ChB, ChA) %>%
gather(key = ref_part, value = Reflectance_Intensity, Intensity, Reflectance) %>%
# Viz
ggplot(mapping = aes(x = Wavelength, y = Reflectance_Intensity, group = FileNum)) +
geom_line(aes(color = Treatment)) +
facet_grid(ref_part ~ Site, scales="free")
df %>%
# select subset
filter(Site == "MNT97") %>%
# arrange for
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(Reflectance = ChB/ChA) %>%
gather(key = Channel, value = Intensity, ChB, ChA) %>%
gather(key = ref_part, value = Reflectance_Intensity, Intensity, Reflectance) %>%
# Viz
ggplot(mapping = aes(x = Wavelength, y = Reflectance_Intensity, group = FileNum)) +
geom_line(aes(color = Treatment)) +
facet_grid(ref_part ~ FileNum, scales="free")
shiny::runApp('C:/Users/toolik/Desktop/UnispecR/Visualizations/unispec_protocol')
runApp('C:/Users/toolik/Desktop/UnispecR/unispec_checks')
runApp()
runApp()
runApp('C:/Users/toolik/Desktop/UnispecR/unispec_checks')
runApp('C:/Users/toolik/Desktop/UnispecR/unispec_checks')
# Select columns to Check
timedata <- df %>%
filter(Site == "DHT89") %>%
select(Site, Date, DateTime, FileNum, Integration, ScanType) %>%
distinct(DateTime, .keep_all = T)
timedata$diff <- timedata$DateTime - lag(timedata$DateTime)
meta_timedata <- left_join(timedata, field_keys)
time_check <- meta_timedata %>% select(Site, Date, DateTime, Block, Treatment, Replicate, Location, FileNum, diff, everything()) %>% ungroup()
# Examine dataframe
time_check %>% select(Date, Site, Block, Treatment, Location,FileNum, diff, Integration) %>% print(n=200)
time_check$Integration %>% unique()
nrow(time_check)
max(time_check$FileNum)
