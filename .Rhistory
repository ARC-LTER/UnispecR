df %>% filter(str_detect(Treatment, "REF"))  %>%
filter(is.na(Block)) %>% print(n=100)
# Replicate NA
df %>% filter(!is.na(Treatment)) %>% filter(is.na(Replicate)) %>%
filter(!str_detect(Treatment, "DARK|REF|VEG"))
## General NA test
df_na <- df %>% filter(is.na(spu_filename) |
is.na(Site) |
is.na(Block) & !str_detect(Treatment, "REF|DARK|VEG") | # Block NA's should always be REFS or EXTRA
is.na(Replicate) & !str_detect(Treatment, "REF"), # Check for replicate NA's that aren't REF
Treatment != "EXTRA|VEG|REF") # don't care about EXTRA
df_na %>% filter(Treatment !="REF") %>% select_if(function(x) typeof(x) != "list") %>% summary()
#####
## Check for large filenumbers : Inconsistent File Number reading due to number at end of site names
df_lgfn <- df %>%
filter(FileNum > 600) %>%  # Sites w/numbers at the end mis-read in as part of file number. All > 100000: Unispec-DC measurements only go up to 5 digits.
select(Date, Site, Block, Treatment, FileNum, spu_filename)
df_lgfn %>% print(n=50)
#####
## Check Site Names
df_sites <- unique(df$Site)
df_sites
## Check Treatment names
df_treatments <- unique(df$Treatment)
df_treatments
### -------------------------------------- SUMMARY CHECKS
## Dataframe
df_summary <- df %>% group_by(Site, Date) %>%
filter(!is.na(Treatment)) %>%
summarize(Treatments = str_c(str_replace_na(unique(Treatment)), collapse = ","), Num_Files = n())
df_summary %>% print(n=100)
# Discrepancies
## Site vs. Site_filename differences
#### should only be Reference files or mislabeled (e.g. MAT extends into LMAT, or NANT continues to MNAT)
df_site_diff <- unispec_file_key_fix %>% left_join(spu_key %>% select(-Date, -Type, -FileNum) %>% rename(Site_filename = Site)) %>%   filter(Site != Site_filename)
df_site_diff %>%
group_by(Date) %>%
summarize(Sites = str_c(unique(Site), collapse = ", "), Sites_filename = str_c(unique(Site_filename), collapse = ", "), Treatments = str_c(str_replace_na(unique(Treatment)), collapse = ","), Num_Files = n())
## Check File Number Pattern:
#### Num Files per block should be multiples of 5, unless REF or NA
df_filenum_count <- unispec_file_key_fix %>% group_by(Site, Date, Block) %>%
filter(Treatment != "DARK") %>%
filter(Treatment != "REF") %>%
summarize(Treatments = str_c(str_replace_na(unique(Treatment)), collapse = ","), Num_Files = n()) %>%
#filter(Treatments != "NA|REF|DARK") %>%
filter(Num_Files %% 5 != 0)  # files per plot
#filter(!str_detect(Treatments, "REF|NA"))
df_filenum_count
#df %>% inner_join(df_filenum_count) %>% print(n=100)
df_indices <- unispec_file_key_fix %>%
filter(!is.na(Treatment)) %>%
filter(!str_detect(Treatment, "REF|DARK")) %>%
left_join(df_processed) %>%
## Format for calculuating indices
unnest(Spectra) %>%
select(-ChB, -ChA, -raw_reflectance, -CorrectionFactor) %>%
rename(Reflectance = corrected_reflectance) %>%
nest(Wavelength, Reflectance,.key = Spectra) %>%
## Calculate NDVI
mutate(Indices = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = "MODIS", indices = c("NDVI", "EVI", "EVI2"))))
index_filename <- paste0(data_path, dir_year, "_index_data.rds")
write_rds(df_indices, index_filename)
## Raw Data
raw_filename <- paste0(data_path, dir_year, "_raw_spu_data.rds")
spu_spectra <- read_rds(raw_filename)
raw_keyname <- paste0(data_path, dir_year, "_raw_spu_key.csv")
spu_key <- read_csv(raw_keyname)
spu_dataframe <- full_join(spu_spectra, spu_key) %>%
# mutate(DateTime = lubridate::ymd_hms(DateTime, tz = "US/Alaska")) %>%
mutate(Date = str_extract(spu_filename, pattern = "^[0-9]{4}-[0-9]{2}-[0-9]{2}")) %>%  # from filename, not DateTime (sometimes discrepancy in unispec instrument time)
arrange(DateTime)
## Raw Data summary
spu_dataframe %>%   group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable()
loaded_files <- spu_dataframe$spu_filename
file_match <- str_c(loaded_files, collapse="|")
## ## Processed Data
processed_filename <- paste0(data_path, dir_year, "_processed_spu_data.rds")
processed_spectra <- read_rds(processed_filename)
## Raw Data
raw_filename <- paste0(data_path, dir_year, "_raw_spu_data.rds")
spu_spectra <- read_rds(raw_filename)
raw_keyname <- paste0(data_path, dir_year, "_raw_spu_key.csv")
spu_key <- read_csv(raw_keyname)
spu_dataframe <- full_join(spu_spectra, spu_key) %>%
# mutate(DateTime = lubridate::ymd_hms(DateTime, tz = "US/Alaska")) %>%
mutate(Date = str_extract(spu_filename, pattern = "^[0-9]{4}-[0-9]{2}-[0-9]{2}")) %>%  # from filename, not DateTime (sometimes discrepancy in unispec instrument time)
arrange(DateTime)
## Raw Data summary
spu_dataframe %>%   group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable()
loaded_files <- spu_dataframe$spu_filename
file_match <- str_c(loaded_files, collapse="|")
## ## Processed Data
processed_filename <- paste0(data_path, dir_year, "_processed_spu_data.rds")
processed_spectra <- read_rds(processed_filename)
## Read .spu raw files
raw_data_path <- paste0(data_path, "spu")
spu_files <- list.files(path = raw_data_path, pattern = ".spu$", full.names = T, recursive=T)
new_spu_files <- str_subset(spu_files, file_match, negate = T)
# Read all the metadata from the spu files using function read_spufile_metadata; add a variable with the filename
#  and max of ChA and ChB.
spu_metadata <- map_dfr(new_spu_files, read_spu_file_metadata) %>%
mutate(spu_filename_full = new_spu_files)
spu_data <- spu_metadata %>%
mutate(Spectra=map(spu_filename_full, function(x) read_spu_file_spectra(x)))
spu_dataframe_new <- spu_data %>% select(spu_filename, Site, FileNum, Date, DateTime, Integration_ms, Temp, Remarks, Spectra, everything())
# > Set Type of Scan -----------------------------------------------------
spu_dataframe_new <- spu_dataframe_new %>%
mutate(Type = ifelse(grepl("DARKscan",Remarks, fixed=T), "Darkscan",
ifelse(grepl("Datascan,DC",Remarks, fixed=T), "Throwawayscan", NA))) %>%
distinct(DateTime, spu_filename, .keep_all = T) %>%
mutate(Date = as.character(Date))
# > Join to previously collected data -----------------------------------------------------
spu_dataframe <-  spu_dataframe %>% bind_rows(spu_dataframe_new)
## Standardize Site Names
unique(spu_dataframe$Site)
spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
unique(spu_dataframe$Site)
## Data summary
spu_dataframe %>%   group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable()
field_key <- paste0(data_path, "2019_unispec_field_key.csv")
unispec_field_key <- read_csv(field_key, skip_empty_rows = T, col_types = cols(
Date = col_character(),
Site = col_character(),
Block = col_character(),
Treatment = col_character(),
Replicate = col_double(),
Location = col_character(),
FileNum = col_double(),
Weather = col_character(),
Notes = col_character()
)) ## remove NA rows
# Confirm spu_dataframe has same Site abbreviation as key
# > Standardize Site Names -----------------------------------------------------
# Check for different spelling of site names
unique(spu_dataframe$Site) %>% sort()
# spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
unique(unispec_field_key$Site) %>% sort()
df <- full_join(spu_dataframe, unispec_field_key) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
unispec_file_key <- df %>%
select(spu_filename, Date, Site, Block, Treatment, Replicate, Location, FileNum, Notes, Weather, Type) %>%
mutate(key_fix = NA)
fix_keyname <- paste0(data_path, dir_year,"_unispec_file_key.csv")
write_csv(unispec_file_key, path = fix_keyname)
file_key_fix <- paste0(data_path, "2019_unispec_file_key.csv")
unispec_file_key_fix <- read_csv(file_key_fix, col_types = cols(
spu_filename = col_character(),
Date = col_character(), # for excel: col_date(format = "%m/%d/%Y"),
Site = col_character(),
Block = col_character(),
Treatment = col_character(),
Replicate = col_double(),
FileNum = col_double(),
Location = col_character(),
Weather = col_character(),
Notes = col_character(),
key_fix = col_logical()
)) %>% filter(!is.na(Site)) %>% mutate(Date = as.character(Date))
# Check for different spelling of site names
unique(spu_dataframe$Site)
spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
df <- full_join(spu_dataframe, unispec_file_key_fix %>% select(-spu_filename, -Type)) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
## Summary Table
df %>%
group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable()
knitr::opts_chunk$set(echo = TRUE)
## Required Packages
library("tidyverse")
library("knitr")
source("UnispecProtocol/unispec_protocol_functions.R") # file loads required functions
## Data Path
data_path <-  "/Users/toolik/OneDrive - Marine Biological Laboratory/Toolik Terrestrial/UnispecData/2019/"
#data_path <- "UnispecRecord/UnispecData/2019/"
dir_year <- "2019"
Site_Names <- list(DHT = "DHT", DH ="DHT", LDHT = "DHT", DHTB = "DHT", HTH = "DHT", DHTPC = "DHT", HST = "HIST", HIS="HIST",
LOF = "LMAT",  LOFB = "LMAT", LNB = "LMAT", LOFRB ="LMAT",
MATB="MAT", MATSL= "MAT", MATBK = "MAT",
MANTB ="MNAT",MNATB ="MNAT", NAMTB = "MNAT",
NMNT = "NANT", NANTB ="NANT", JULNB ="NANT",NMNTB ="NANT",
LSHB= "SHB", SHBB = "SHB", SHRBB = "SHB", SHRB = "SHB",
LWSG = "WSG", WSGB = "WSG", WS ="WSG", WSB = "WSG", WSDB = "WSG") #TEST = "LAB2"
band_defns <- tribble(
~definition, ~color, ~min, ~max,
"ITEX", "red", 560, 600,
"ITEX", "nir", 725, 1000,
"MODIS", "red", 620, 670,
"MODIS", "nir", 841, 876,
"MODIS", "blue", 459,479,
"SKYE", "red", 620, 680,
"SKYE", "nir", 830, 880,
"SKYE", "blue", 455, 480,
"ToolikGIS_Drone_2018", "red", 640, 680,
"ToolikGIS_Drone_2018", "nir", 820, 890,
"ToolikGIS_MicaSense_2019", "blue", 455, 495,
"ToolikGIS_MicaSense_2019", "green", 540, 580,
"ToolikGIS_MicaSense_2019", "red", 658, 678,
"ToolikGIS_MicaSense_2019", "red_edge", 707, 727,
"ToolikGIS_MicaSense_2019", "near_ir", 800, 880,
"ToolikEDC", "red", 560, 680,
"ToolikEDC", "nir", 725, 1000
)
## Raw Data
raw_filename <- paste0(data_path, dir_year, "_raw_spu_data.rds")
spu_spectra <- read_rds(raw_filename)
raw_keyname <- paste0(data_path, dir_year, "_raw_spu_key.csv")
spu_key <- read_csv(raw_keyname)
spu_dataframe <- full_join(spu_spectra, spu_key) %>%
# mutate(DateTime = lubridate::ymd_hms(DateTime, tz = "US/Alaska")) %>%
mutate(Date = str_extract(spu_filename, pattern = "^[0-9]{4}-[0-9]{2}-[0-9]{2}")) %>%  # from filename, not DateTime (sometimes discrepancy in unispec instrument time)
arrange(DateTime)
## Raw Data summary
spu_dataframe %>%   group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable()
loaded_files <- spu_dataframe$spu_filename
file_match <- str_c(loaded_files, collapse="|")
## ## Processed Data
processed_filename <- paste0(data_path, dir_year, "_processed_spu_data.rds")
processed_spectra <- read_rds(processed_filename)
## Read .spu raw files
raw_data_path <- paste0(data_path, "spu")
spu_files <- list.files(path = raw_data_path, pattern = ".spu$", full.names = T, recursive=T)
new_spu_files <- str_subset(spu_files, file_match, negate = T)
# Read all the metadata from the spu files using function read_spufile_metadata; add a variable with the filename
#  and max of ChA and ChB.
spu_metadata <- map_dfr(new_spu_files, read_spu_file_metadata) %>%
mutate(spu_filename_full = new_spu_files)
spu_data <- spu_metadata %>%
mutate(Spectra=map(spu_filename_full, function(x) read_spu_file_spectra(x)))
spu_dataframe_new <- spu_data %>% select(spu_filename, Site, FileNum, Date, DateTime, Integration_ms, Temp, Remarks, Spectra, everything())
# > Set Type of Scan -----------------------------------------------------
spu_dataframe_new <- spu_dataframe_new %>%
mutate(Type = ifelse(grepl("DARKscan",Remarks, fixed=T), "Darkscan",
ifelse(grepl("Datascan,DC",Remarks, fixed=T), "Throwawayscan", NA))) %>%
distinct(DateTime, spu_filename, .keep_all = T) %>%
mutate(Date = as.character(Date))
# > Join to previously collected data -----------------------------------------------------
spu_dataframe <-  spu_dataframe %>% bind_rows(spu_dataframe_new)
## Standardize Site Names
unique(spu_dataframe$Site)
spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
unique(spu_dataframe$Site)
## Data summary
spu_dataframe %>%   group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable()
# > Extract only Spectral data without metadata -----------------------------------------------------
spu_spectra <- spu_dataframe %>% select(spu_filename, DateTime, Spectra)
## Save raw data as .rds
raw_filename <- paste0(data_path, format(spu_dataframe$DateTime[1], format="%Y"),"_raw_spu_data.rds")
write_rds(spu_spectra, path = raw_filename)
# > Extract only Spectral Metadata for .csv key -----------------------------------------------------
spu_key <- spu_dataframe %>%
select(-Spectra) %>% # remove for .csv
select(spu_filename, everything()) # set order
## Save raw metadata key
raw_keyname <- paste0(data_path, format(spu_dataframe$DateTime[1], format="%Y"),"_raw_spu_key.csv")
write_csv(spu_key, path = raw_keyname)
field_key <- paste0(data_path, "2019_unispec_field_key.csv")
unispec_field_key <- read_csv(field_key, skip_empty_rows = T, col_types = cols(
Date = col_character(),
Site = col_character(),
Block = col_character(),
Treatment = col_character(),
Replicate = col_double(),
Location = col_character(),
FileNum = col_double(),
Weather = col_character(),
Notes = col_character()
)) ## remove NA rows
# Confirm spu_dataframe has same Site abbreviation as key
# > Standardize Site Names -----------------------------------------------------
# Check for different spelling of site names
unique(spu_dataframe$Site) %>% sort()
# spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
unique(unispec_field_key$Site) %>% sort()
df <- full_join(spu_dataframe, unispec_field_key) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
field_key <- paste0(data_path, "2019_unispec_field_key.csv")
unispec_field_key <- read_csv(field_key, skip_empty_rows = T, col_types = cols(
Date = col_character(),
Site = col_character(),
Block = col_character(),
Treatment = col_character(),
Replicate = col_double(),
Location = col_character(),
FileNum = col_double(),
Weather = col_character(),
Notes = col_character()
)) ## remove NA rows
# Confirm spu_dataframe has same Site abbreviation as key
# > Standardize Site Names -----------------------------------------------------
# Check for different spelling of site names
unique(spu_dataframe$Site) %>% sort()
# spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
unique(unispec_field_key$Site) %>% sort()
df <- full_join(spu_dataframe, unispec_field_key) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
unispec_file_key <- df %>%
select(spu_filename, Date, Site, Block, Treatment, Replicate, Location, FileNum, Notes, Weather, Type) %>%
mutate(key_fix = NA)
fix_keyname <- paste0(data_path, dir_year,"_unispec_file_key.csv")
write_csv(unispec_file_key, path = fix_keyname)
file_key_fix <- paste0(data_path, "2019_unispec_file_key.csv")
unispec_file_key_fix <- read_csv(file_key_fix, col_types = cols(
spu_filename = col_character(),
Date = col_character(), # for excel: col_date(format = "%m/%d/%Y"),
Site = col_character(),
Block = col_character(),
Treatment = col_character(),
Replicate = col_double(),
FileNum = col_double(),
Location = col_character(),
Weather = col_character(),
Notes = col_character(),
key_fix = col_logical()
)) %>% filter(!is.na(Site)) %>% mutate(Date = as.character(Date))
# Check for different spelling of site names
unique(spu_dataframe$Site)
spu_dataframe$Site <- recode (spu_dataframe$Site, !!!Site_Names, .default = spu_dataframe$Site)
df <- full_join(spu_dataframe, unispec_file_key_fix %>% select(-spu_filename, -Type)) %>% arrange(DateTime) %>%
mutate_at(.vars = vars(Site, Block, Treatment), .funs = factor)
## Summary Table
df %>%
group_by(Date, Site) %>%
summarize(Files = n_distinct(spu_filename)) %>%
kable()
df
df_check <- df %>% filter(Site == "TEST", Date == "2019-07-15")
df_check
## CABLE-MOTION
df_check %>% filter(Block == "CABLE-MOTION")
## CABLE-MOTION
plot_check <- df_check %>% filter(Block == "CABLE-MOTION")
## CABLE-MOTION
plot_check <- df_check %>% filter(Block == "CABLE-MOTION") %>% unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
## CABLE-MOTION
plot_check <- df_check %>% filter(Block == "CABLE-MOTION") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
gather(key = Channel, value = Intensity, ChB, ChA)  %>%
gather(key = ref_part, value = Reflectance_Intensity, Intensity, Reflectance)
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance_Intensity)) +
geom_line(aes(linetype=Channel, color = factor(Integration_ms))) +
facet_grid(ref_part ~ Date, scales = "free")
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance_Intensity)) +
geom_line(aes(linetype=Channel, group  = spu_filename, color = factor(Integration_ms))) +
facet_grid(ref_part ~ Date, scales = "free")
geom_line(aes(linetype=Channel, color = spu_filename) +
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance_Intensity)) +
geom_line(aes(linetype=Channel, color = spu_filename)) +
facet_grid(ref_part ~ Date, scales = "free")
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance_Intensity)) +
geom_line(aes(linetype=Channel, color = spu_filename)) +
facet_grid(ref_part ~ Date, scales = "free")
## CABLE-MOTION
plot_check <- df_check %>% filter(Block == "CABLE-MOTION") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
gather(key = Channel, value = Intensity, ChB, ChA)  %>%
gather(key = ref_part, value = Reflectance_Intensity, Intensity, Reflectance)
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance_Intensity)) +
geom_line(aes(linetype=Channel, color = spu_filename)) +
facet_grid(ref_part ~ Date, scales = "free")
## CABLE-MOTION
plot_check <- df_check %>% filter(Block == "CABLE-MOTION") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
gather(key = Channel, value = Intensity, ChB, ChA)
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance_Intensity)) +
geom_line(aes(linetype=Channel, color = Treatment)) +
facet_grid(ref_part ~ Date, scales = "free")
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance_Intensity)) +
geom_line(aes(linetype=Channel, color = Treatment)) +
facet_grid(Channel ~ Date, scales = "free")
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance_Intensity)) +
geom_line(aes(linetype=Channel, color = spu_filename)) +
facet_grid(Channel ~ Treatment, scales = "free")
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Intensity)) +
geom_line(aes(linetype=Channel, color = spu_filename)) +
facet_grid(Channel ~ Treatment, scales = "free")
plot_check_reflectance <- df_check %>% filter(Block == "CABLE-MOTION") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
plot_check_reflectance
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=1/Reflectance)) +
geom_line(aes(linetype=Channel, color = spu_filename)) +
facet_grid(Channel ~ Treatment, scales = "free")
ggplot(data = plot_check_reflectance, mapping = aes(x=Wavelength, y=1/Reflectance)) +
geom_line(aes(linetype=Channel, color = spu_filename)) +
facet_grid(Channel ~ Treatment, scales = "free")
ggplot(data = plot_check_reflectance, mapping = aes(x=Wavelength, y=1/Reflectance)) +
geom_line(aes(color = spu_filename)) +
facet_grid(Block ~ Treatment, scales = "free")
## CABLE-MOTION
### PLOT CHANNELS
plot_check <- df_check %>% filter(Block == "CABLE-MOTION" | Block == "CABLE-COMPARE") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
gather(key = Channel, value = Intensity, ChB, ChA)
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Intensity)) +
geom_line(aes(linetype=Channel, color = spu_filename)) +
facet_grid(Channel ~ Treatment, scales = "free")
### PLOT CORRECTION FACTOR
plot_check_reflectance <- df_check %>% filter(Block == "CABLE-MOTION" | Block == "CABLE-COMPARE") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
ggplot(data = plot_check_reflectance, mapping = aes(x=Wavelength, y=1/Reflectance)) +
geom_line(aes(color = spu_filename)) +
facet_grid(Block ~ Treatment, scales = "free")
ggplot(data = plot_check_reflectance, mapping = aes(x=Wavelength, y=1/Reflectance)) +
geom_line(aes(color = spu_filename)) +
facet_grid(Integration_ms ~ Treatment, scales = "free")
## CABLE-NDVI
plot_check <- df_check %>% filter(Block == "CABLE-COMPARE")
## CABLE-NDVI
plot_check <- df_check %>% filter(Block == "CABLE-NDVI") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
gather(key = Channel, value = Intensity, ChB, ChA)
ggplot(data = plot_check_reflectance, mapping = aes(x=Wavelength, y=1/Reflectance)) +
geom_line(aes(color = spu_filename)) +
facet_grid(Integration_ms ~ Treatment, scales = "free")
## CABLE-NDVI
plot_check <- df_check %>% filter(Block == "CABLE-NDVI") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
gather(key = Channel, value = Intensity, ChB, ChA)
ggplot(data = plot_check_reflectance, mapping = aes(x=Wavelength, y=1/Reflectance)) +
geom_line(aes(color = spu_filename)) +
facet_grid(Integration_ms ~ Treatment, scales = "free")
## CABLE-NDVI
plot_check <- df_check %>% filter(Block == "CABLE-NDVI") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
gather(key = Channel, value = Intensity, ChB, ChA)
plot_check
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Intensity)) +
geom_line(aes(linetype=Channel, color = spu_filename)) +
facet_grid(Channel ~ Treatment, scales = "free")
## SPECIFY SITE/DATE/ETC to ZOOM IN ON
check_site <- "TEST"
check_dates <-  c(lubridate::ymd("2019-07-15"), lubridate::ymd("2019-06-22")) # necessary to unlist dates vector
ndvi_check <- df_check %>% filter(Block == "CABLE-NDVI", Location == "DRYAS")
ndvi_check
ndvi_check <- df_check %>% filter(Block == "CABLE-NDVI", Location == "DRYAS") %>%
mutate(Indices = map(Spectra, function(x) calculate_indices(x, band_defns = band_defns, instrument = "MODIS", indices = c("NDVI", "EVI", "EVI2"))))
ndvi_check
ndvi_check %>% unnest(Indices)
ndvi_check %>% unnest(Indices) %>% filter(Index == "NDVI") %>% select(Site, FileNum, Block, Treatment, Value)
## CABLE-NDVI
plot_check <- df_check %>% filter(Block == "CABLE-NDVI") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance))
geom_line(aes(linetype=Channel, color = spu_filename)) +
facet_grid(Channel ~ Treatment, scales = "free")
## CABLE-NDVI
plot_check <- df_check %>% filter(Block == "CABLE-NDVI") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
geom_line(aes(color = spu_filename)) +
facet_grid(Block ~ Treatment, scales = 'free')
## CABLE-NDVI
plot_check <- df_check %>% filter(Block == "CABLE-NDVI") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance))
df_check
plot_check
geom_line(aes(color = spu_filename)) +
facet_grid(Location ~ Treatment, scales = "free")
## CABLE-NDVI
plot_check <- df_check %>% filter(Block == "CABLE-NDVI") %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance))
plot_check
ggplot(data = plot_check, mapping = aes(x=Wavelength, y=Reflectance)) +
geom_line(aes(color = spu_filename)) +
facet_grid(Location ~ Treatment, scales = "free")
## Processed Data
processed_dataframe <- read_rds(paste0(data_path, "2019_processed_spu_data.rds")) %>%
mutate(DateTime = lubridate::as_datetime(DateTime, tz="US/Alaska"))
processed_dataframe
## Processed Data
processed_dataframe <- read_rds(paste0(data_path, "2019_processed_spu_data.rds")) %>%
mutate(DateTime = lubridate::as_datetime(DateTime, tz="US/Alaska")) %>%
filter(Site == "LMAT", Date == "2019-07-15")
## Processed Data
processed_dataframe <- read_rds(paste0(data_path, "2019_processed_spu_data.rds")) %>%
mutate(DateTime = lubridate::as_datetime(DateTime, tz="US/Alaska")) %>%
filter(Date == "2019-07-15")
processed_dataframe %>% select(DateTime)
processed_dataframe %>% select(DateTime) %>% lubridate::day()
processed_dataframe %>% select(DateTime) %>% lubridate::day(tz = "US/Alaska")
?date
?lubridate::date
## Processed Data
processed_dataframe <- read_rds(paste0(data_path, "2019_processed_spu_data.rds")) %>%
mutate(DateTime = lubridate::as_datetime(DateTime, tz="US/Alaska"))
