# Examine dataframe
time_check
time_check <- timedata %>% select(Site, DateTime, spu_filename, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check
# Select columns to Check
timedata <- df_check %>% select(Site, Date, Treatment, Replicate, FileNum, spu_filename, DateTime, Integration_ms) %>%
group_by(DateTime) %>% arrange(DateTime) %>% distinct()
timedata$diff <- timedata$DateTime - lag(timedata$DateTime)
time_check <- timedata %>% select(Site, DateTime, spu_filename, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check
end_file <- NA
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(FileNum > start_file, FileNum < end_file)
df_check %>% plot_channels()
df_check
end_file <- 100
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(FileNum > start_file, FileNum < end_file)
df_check %>% plot_channels()
# Select columns to Check
timedata <- df_check %>% select(Site, Date, Treatment, Replicate, FileNum, spu_filename, DateTime, Integration_ms) %>%
group_by(DateTime) %>% arrange(DateTime) %>% distinct()
timedata$diff <- timedata$DateTime - lag(timedata$DateTime)
time_check <- timedata %>% select(Site, DateTime, spu_filename, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check
# Examine dataframe
time_check %>% print(n=100)
time_check <- timedata %>% select(Site, DateTime, Treatment, spu_filename, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check %>% print(n=100)
time_check <- timedata %>% select(Site, DateTime, spu_filename, Treatment, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check %>% print(n=100)
time_check <- timedata %>% select(Site, DateTime, spu_filename, Treatment,FileNum, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check %>% print(n=100)
check_dates <- ymd("2015-07-31") # necessary to unlist dates vector
start_file <- 0
end_file <- 100
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(FileNum > start_file, FileNum < end_file)
# Select columns to Check
timedata <- df_check %>% select(Site, Date, Treatment, Replicate, FileNum, spu_filename, DateTime, Integration_ms) %>%
group_by(DateTime) %>% arrange(DateTime) %>% distinct()
timedata$diff <- timedata$DateTime - lag(timedata$DateTime)
time_check <- timedata %>% select(Site, DateTime, spu_filename, Treatment,FileNum, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check %>% print(n=100)
check_dates <- ymd("2015-07-05") # necessary to unlist dates vector
start_file <- 0
end_file <- 100
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(FileNum > start_file, FileNum < end_file)
df %>% filter(Site == "HIST") %>% distinct(Date)
check_dates <- ymd("2015-06-24") # necessary to unlist dates vector
start_file <- 0
end_file <- 100
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(FileNum > start_file, FileNum < end_file)
df_check %>% plot_channels()
# Select columns to Check
timedata <- df_check %>% select(Site, Date, Treatment, Replicate, FileNum, spu_filename, DateTime, Integration_ms) %>%
group_by(DateTime) %>% arrange(DateTime) %>% distinct()
timedata$diff <- timedata$DateTime - lag(timedata$DateTime)
time_check <- timedata %>% select(Site, DateTime, spu_filename, Treatment,FileNum, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check %>% print(n=100)
df %>% filter(Site == "HIST") %>% distinct(Date)
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
ifelse(!all_files, filter(FileNum > start_file, FileNum < end_file))
## File Numbers
all_files <- F
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
ifelse(!all_files, filter(FileNum > start_file, FileNum < end_file))
all_files
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(ifelse(!all_files, FileNum > start_file, FileNum < end_file))
df_check
## File Numbers
all_files <- T
start_file <- 0
end_file <- 100
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(ifelse(!all_files, FileNum > start_file, FileNum < end_file))
df_check
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(ifelse(!all_files, FileNum > start_file & FileNum < end_file, FileNum > 0))
## File Numbers
all_files <- F
start_file <- 0
end_file <- 100
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(ifelse(!all_files, FileNum > start_file & FileNum < end_file, FileNum > 0))
df_check
end_file <- 10
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(ifelse(!all_files, FileNum > start_file & FileNum < end_file, FileNum > 0))
df_check
## File Numbers
all_files <- F
start_file <- 0
end_file <- 10
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(ifelse(!all_files, FileNum > start_file & FileNum < end_file, FileNum > 0))
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(ifelse(all_files, FileNum > start_file & FileNum < end_file, FileNum > 0))
## File Numbers
start_file <- 0
end_file <- 10
df_check <- df %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(FileNum > start_file, FileNum < end_file)
## PLOT
df_check %>% plot_channels()
## Which Date
check_dates <- ymd("2015-06-05") # necessary to unlist dates vector
## File Numbers
start_file <- 0
## Possible Dates
spu_dataframe %>% filter(Site %in% check_sites) %>% pull(Date) %>% distinct()
## Which Date
check_dates <- ymd("2015-06-05") # necessary to unlist dates vector
spu_dataframe
df_check <- spu_dataframe %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(FileNum > start_file, FileNum < end_file)
## PLOT
df_check %>% plot_channels()
## Possible Dates
df %>% filter(Site %in% check_sites) %>% pull(Date) %>% distinct()
end_file <- 15
df_check <- spu_dataframe %>% # full dataframe not just ref's
filter(Date %in% check_dates) %>%
filter(Site %in% check_sites) %>%
filter(FileNum > start_file, FileNum < end_file)
## PLOT
df_check %>% plot_channels()
# Select columns to Check
timedata <- df_check %>% select(Site, Date, Treatment, Replicate, FileNum, spu_filename, DateTime, Integration_ms) %>%
group_by(DateTime) %>% arrange(DateTime) %>% distinct()
timedata$diff <- timedata$DateTime - lag(timedata$DateTime)
time_check <- timedata %>% select(Site, DateTime, spu_filename, Treatment,FileNum, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check %>% print(n=100)
time_check <- timedata %>% select(DateTime, spu_filename, Site, Block, Treatment,FileNum, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check %>% print(n=100)
time_check <- timedata %>% select(DateTime, spu_filename, Site, Block, Treatment,FileNum, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check %>% print(n=100)
time_check <- timedata %>% select(DateTime, spu_filename, Site, Treatment,FileNum, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check %>% print(n=100)
# Select columns to Check
timedata <- df_check %>% select(Site, Date, Treatment, Replicate, FileNum, spu_filename, DateTime, Integration_ms) %>%
group_by(DateTime) %>% arrange(DateTime) %>% distinct()
df_check
# Select columns to Check
timedata <- df_check %>%
full_join(df) %>% # add metadata
select(Site, Date, Block,Treatment, Replicate, FileNum, spu_filename, DateTime, Integration_ms) %>%
group_by(DateTime) %>% arrange(DateTime) %>% distinct()
# Select columns to Check
timedata <- df_check %>% select(-Spectra) %>%
full_join(df) %>% # add metadata
select(Site, Date, Block,Treatment, Replicate, FileNum, spu_filename, DateTime, Integration_ms) %>%
group_by(DateTime) %>% arrange(DateTime) %>% distinct()
timedata$diff <- timedata$DateTime - lag(timedata$DateTime)
# Check time differences
time_check <- timedata %>% select(DateTime, spu_filename, Site, Treatment,FileNum, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check %>% print(n=100)
# Check time differences
time_check <- timedata %>% select(DateTime, spu_filename, Site, Block, Treatment,FileNum, diff, Integration_ms) #%>% filter(FileNum>=0 & FileNum <=15)
# Examine dataframe
time_check %>% print(n=100)
key_info_list %>% filter(Site == "HIST")
key_info %>% filter(Site == "HIST")
key_info %>% filter(Site == "HIST") %>% select(ref_filenames)
## PLOT
df_check %>% plot_channels()
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
## PLOT
df_check %>% plot_channels()
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
## PLOT
df_check %>% plot_channels()
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
## PLOT
df_check %>% plot_channels()
plot_channels <- function(df_subset, Spectra_Name = Spectra) {
# Plot spectra from a subset of a dataframe
plot_check <- df_subset %>%
unnest(vars(Spectra_Name)) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
gather(key = Channel, value = Intensity, ChB, ChA) %>%
gather(key = ref_part, value = Reflectance_Intensity, Intensity, Reflectance)
## Plot Specified Correction Factors for quality check
plot_zoom <- ggplot(data = plot_check, mapping = aes(x = Wavelength, y = Reflectance_Intensity)) +
geom_line(aes(color=Channel)) +
facet_grid(ref_part ~ Date + Site + FileNum + Integration_ms, scales="free")
return(plot_zoom)
}
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
plot_check <- df_subset %>%
unnest(Spectra_Name) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
gather(key = Channel, value = Intensity, ChB, ChA) %>%
gather(key = ref_part, value = Reflectance_Intensity, Intensity, Reflectance)
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
## PLOT
df_check %>% plot_channels()
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
## PLOT
df_check %>% plot_channels()
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
## PLOT
df_check %>% plot_channels()
df_check
# Select columns to Check
timedata <- df_check %>% select(-Spectra) %>%
full_join(df) %>% # add metadata
select(Site, Date, Block,Treatment, Replicate, FileNum, spu_filename, DateTime, Integration_ms) %>%
group_by(DateTime) %>% arrange(DateTime) %>% distinct()
timedata
## PLOT METADATA
df_check %>% inner_join(df)
## PLOT METADATA
df_check %>% select(-Spectra) %>% inner_join(df)
## PLOT METADATA
df_check %>% select(spu_filename) %>% inner_join(df)
## PLOT METADATA
df_subset <- df_check %>% select(spu_filename) %>% inner_join(df)
raw_spectra <- df_subset %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
raw_spectra
xlsx_spectra <- df_subset %>%
unnest(multispec_spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
df_subset$multispec_spectra[[1]]
df_subset$multispec_spectra[[2]]
xlsx_spectra <- df_subset %>%
unnest(multispec_spectra)
df_subset
xlsx_spectra <- df_subset %>%
filter(!is.na(ref_filenames)) %>%
unnest(multispec_spectra)
xlsx_spectra <- df_subset %>%
filter(!is.na(ref_filenames)) %>%
unnest(multispec_spectra) %>%
filter(Wavelength > 400, Wavelength < 1000)
xlsx_spectra
plot_zoom <- ggplot(data = raw_spectra, mapping = aes(x = Wavelength, y = Reflectance)) +
geom_line() +
facet_wrap(vars(Date, Site, FileNum, Integration_ms))
plot_zoom
plot_zoom <- ggplot(data = raw_spectra, mapping = aes(x = Wavelength, y = Reflectance)) +
geom_line() +
geom_line(data = xlsx_spectra, color = "red")) +
facet_wrap(vars(Date, Site, FileNum, Integration_ms))
plot_zoom <- ggplot() +
geom_line(data = raw_spectra, mapping = aes(x = Wavelength, y = Reflectance)) +
geom_line(data = xlsx_spectra, color = "red")) +
facet_wrap(vars(Date, Site, FileNum, Integration_ms))
plot_zoom <- ggplot() +
geom_line(data = raw_spectra, mapping = aes(x = Wavelength, y = Reflectance)) +
geom_line(data = xlsx_spectra, color = "red") +
facet_wrap(vars(Date, Site, FileNum, Integration_ms))
plot_zoom
plot_zoom <- ggplot() +
geom_line(data = raw_spectra, mapping = aes(x = Wavelength, y = Reflectance)) +
geom_line(data = xlsx_spectra, color = "red", aes(x = Wavelength, y = Reflectance)) +
facet_wrap(vars(Date, Site, FileNum, Integration_ms))
plot_zoom
spectra <- bind_rows(raw_spectra, xlsx_spectra)
plot_zoom <- ggplot(data = spectra, mapping = aes(x = Wavelength, y = Reflectance, color = Status)) +
geom_line() +
facet_wrap(vars(Date, Site, FileNum, Integration_ms))
plot_zoom
raw_spectra <- df_subset %>%
unnest(Spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(Status = "raw")
xlsx_spectra <- df_subset %>%
filter(!is.na(ref_filenames)) %>%
unnest(multispec_spectra) %>%
filter(Wavelength > 400, Wavelength < 1000) %>%
mutate(Status = "multispec")
spectra <- bind_rows(raw_spectra, xlsx_spectra)
plot_zoom <- ggplot(data = spectra, mapping = aes(x = Wavelength, y = Reflectance, color = Status)) +
geom_line() +
facet_wrap(vars(Date, Site, FileNum, Integration_ms))
plot_zoom
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
df_subset %>% plot_reflectances()
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
df_subset %>% plot_reflectances()
plot_zoom <- ggplot(data = spectra, mapping = aes(x = Wavelength, y = Reflectance, color = Status)) +
geom_line() +
facet_wrap(vars(Date, Site, Block, Treatment, spu_filename))
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
df_subset %>% plot_reflectances()
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
## TIME CHECK
df_subset %>% check_time_difference()
source('~/UnispecR/UnispecRecord/unispec_record_functions.R')
## TIME CHECK
df_subset %>% check_time_difference()
ref_mistake_files <- ref_data_mistakes %>% select(spu_filename) %>% distinct() %>% pull()
ref_mistake_files
?recode
ref_mistake_files <- ref_data_mistakes %>% select(spu_filename) %>% distinct() %>% pull()
maxed_files <- maxed_data_files_bad$spu_filename
low_files <- low_data_files$spu_filename
min_files <- min_data_files$spu_filename
absurd_files <- absurd_data_files$spu_filename
duplicate_files <- duplicates$spu_filename
## Pattern of files to exclude
problem_files <- str_c(c(maxed_files, ref_mistake_files, low_files, min_files, absurd_files, duplicate_files), collapse = "|")
problem_files
## Pattern of files to exclude
problem_files <- str_c(c(maxed_files, ref_mistake_files, low_files, min_files, absurd_files, duplicate_files), collapse = "|")
zero_files <- zero_data_files$spu_filename
absurd_files <- absurd_data_files$spu_filename
duplicate_files <- duplicates$spu_filename
## Pattern of files to exclude
problem_files <- str_c(c(maxed_files, ref_mistake_files, low_files, min_files, absurd_files, duplicate_files), collapse = "|")
## Pattern of files to exclude
problem_files <- str_c(c(maxed_files, ref_mistake_files, low_files, zero_files, absurd_files, duplicate_files), collapse = "|")
problem_files
df_problems <- df %>%
mutate(ref_problem = str_detect(ref_filenames, problem_files)) %>% # use str_extract_all to get filenames
mutate(file_problem = str_detect(spu_filename, problem_files))
df_problems %>% select(Date, Site, Block, Treatment, spu_filename, ref_problem, file_problem)
df_problems %>% select_if(function(x) typeof(x) != "list") %>% summary()
df_problems
## Problems labeled
df_problems <- df %>%
mutate(ref_problem = if_else(str_detect(ref_filenames, problem_files), "bad_reference", NA)) %>% # use str_extract_all to get filenames
mutate(file_problem = if_else(str_detect(spu_filename, problem_files), "bad_file", NA))
str_detect(df$spu_filename[1], problem_files)
if_else(str_detect(df$spu_filename[1], problem_files), "problem_file", "not problem")
## Problems labeled
df_problems <- df %>%
mutate(ref_problem = if_else(str_detect(ref_filenames, problem_files), "bad_reference", NA))
if_else(str_detect(df$ref_filenames[1], problem_files), "problem_file", "not problem")
str_detect(df$ref_filenames, problem_files)
str_detect(df$ref_filenames[1], problem_files)
?str_detect
## Problems labeled
df_problems <- df %>%# use str_extract_all to get filenames
mutate(file_problem = if_else(str_detect(spu_filename, problem_files), "bad_file", NA))
## Problems labeled
df_problems <- df %>%
mutate(ref_problem = str_detect(ref_filenames, problem_files)) %>% # use str_extract_all to get filenames
mutate(file_problem = str_detect(spu_filename, problem_files))
df_problems$problem_type = NA
df_problems
df_problems$problem_type
df_problems$problem_type[df_problems$spu_filename %in% ref_mistake_files]
df_problems$problem_type[df_problems$spu_filename %in% ref_mistake_files] <- "mislabeled_reference"
df_problems$problem_type[df_problems$spu_filename %in% maxed_files] <- "maxed"
df_problems
df_problems$problem_type
df_problems$problem_type %>% factor()
df_2017 <- read_rds("UnispecData/2017_unispec_dataframe_clean.rds")
knitr::opts_chunk$set(echo = TRUE)
## Required Packages
require("tidyverse")
require("knitr")
require("lubridate")
source("unispec_record_functions.R") # file loads required functions
df_2017 <- read_rds("UnispecData/2017_unispec_dataframe_clean.rds")
df_2017
df_2016 <- read_rds("UnispecData/2016_unispec_dataframe_clean.rds") %>%
rename(raw_spectra = spu_spectra,
corrected_spectra = multispec_spectra)
dir_year <- "2017"
## Transform for problem check
df <- df_2017 %>%
remame(Spectra = raw_spectra)
## Transform for problem check
df <- df_2017 %>%
replace(Spectra = raw_spectra)
?rename
## Transform for problem check
df <- df_2017 %>%
rename(Spectra = raw_spectra)
# Check variables
df_names <- names(df)
#####
# Check for Meaningful NA's
df_na <- df %>% filter(is.na(spu_filename) |
is.na(Site) |
is.na(Treatment) & !is.na(xlsx_filename) | # missing treatment in .xlsx file
is.na(Block) & !str_detect(Treatment, "REF") | # Block NA's should always be REFS or EXTRA
is.na(Replicate) & !str_detect(Treatment, "REF"), # Check for replicate NA's that aren't REF
Treatment != "EXTRA") # don't care about EXTRA
df_names
#####
# Check for Meaningful NA's
df_na <- df %>% filter(is.na(spu_filename) |
is.na(Site) |
is.na(Treatment) & !is.na(xlsx_filename) | # missing treatment in .xlsx file
is.na(Block) & !str_detect(Treatment, "REF") | # Block NA's should always be REFS or EXTRA
is.na(Replicate) & !str_detect(Treatment, "REF"), # Check for replicate NA's that aren't REF
Treatment != "EXTRA") # don't care about EXTRA
## Transform for problem check
df <- df_2017 %>%
rename(Spectra = raw_spectra) %>%
mutate(xlsx_filename = NA)
#####
# Check for Meaningful NA's
df_na <- df %>% filter(is.na(spu_filename) |
is.na(Site) |
is.na(Treatment) & !is.na(xlsx_filename) | # missing treatment in .xlsx file
is.na(Block) & !str_detect(Treatment, "REF") | # Block NA's should always be REFS or EXTRA
is.na(Replicate) & !str_detect(Treatment, "REF"), # Check for replicate NA's that aren't REF
Treatment != "EXTRA") # don't care about EXTRA
df_na
#####
## Check for large filenumbers : Inconsistent File Number reading due to number at end of site names
df_lgfn <- df %>%
filter(FileNum > 500) %>%  # Sites w/numbers at the end mis-read in as part of file number. All > 100000: Unispec-DC measurements only go up to 5 digits.
select(Date, Site, Block, FileNum, spu_filename)
df_lgfn
#####
## Check Site Names
df_sites <- unique(df$Site)
df_sites
## Check Treatment names
df_treatments <- unique(df$Treatment)
df_treatments
## Dataframe
df_summary <- df %>% group_by(Site, Date) %>%  summarize(Treatments = str_c(str_replace_na(unique(Treatment)), collapse = ","), Num_Files = n())
df_summary %>% print(n=100)
# Discrepancies
## Site vs. Site_filename differences
#### should only be Reference files or mislabeled (e.g. MAT extends into LMAT, or NANT continues to MNAT)
df_site_diff <- unispec_key_fix %>% left_join(spu_key %>% select(-Date, -Type, -FileNum) %>% rename(Site_filename = Site)) %>%   filter(Site != Site_filename)
df_names
df_sites
df_treatments
df_lgfn
df_site_diff
df_filenum_count
df_summary
# Discrepancies
## Site vs. Site_filename differences
#### should only be Reference files or mislabeled (e.g. MAT extends into LMAT, or NANT continues to MNAT)
df_site_diff <- unispec_key_fix %>% left_join(spu_key %>% select(-Date, -Type, -FileNum) %>% rename(Site_filename = Site)) %>%   filter(Site != Site_filename)
unispec_key_fix <- read_key_file("UnispecData/2017/2017_unispec_key.csv")
unispec_key_fix
# Discrepancies
## Site vs. Site_filename differences
#### should only be Reference files or mislabeled (e.g. MAT extends into LMAT, or NANT continues to MNAT)
df_site_diff <- unispec_key_fix %>% left_join(spu_key %>% select(-Date, -Type, -FileNum) %>% rename(Site_filename = Site)) %>%   filter(Site != Site_filename)
## Check File Number Pattern:
#### Num Files per block should be multiples of 5, unless REF or NA
df_filenum_count <- unispec_key_fix %>% group_by(Site, Date, Block) %>%
summarize(Treatments = str_c(str_replace_na(unique(Treatment)), collapse = ","), Num_Files = n()) %>%
filter(Treatments != "NA") %>%
filter(Num_Files %% 5 != 0) %>% # files per plot
filter(!str_detect(Treatments, "REF|NA"))
df_filenum_count
df %>% inner_join(df_filenum_count) %>% print(n=100) %>% filter(Site == "SHB")
df %>% inner_join(df_filenum_count) %>% print(n=100)
df_filenum_count
### Check raw spu_files have no duplicates
nrow(spu_data) == length(unique(spu_data$spu_filename))
## Check for duplicates in key
unispec_key_fix  %>% group_by(spu_filename) %>%
filter(n()>1) %>%
arrange(spu_filename) %>%
filter(!(Site %in% c("LMAT", "MAT") & Date == "2015-07-10")) %>% # file naming error in 2015
print(n=100)
unispec_key_fix %>% full_join(df)
